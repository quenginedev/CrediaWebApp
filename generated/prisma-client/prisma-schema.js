module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBusiness {
  count: Int!
}

type AggregateFundDetail {
  count: Int!
}

type AggregateFundType {
  count: Int!
}

type AggregateIndustry {
  count: Int!
}

type AggregateLender {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Business {
  id: ID!
  name: String!
  industry: Industry!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_details: FundDetail
  fund_status: FundStatus!
  user: User!
  created_at: DateTime!
  updated_at: DateTime!
}

type BusinessConnection {
  pageInfo: PageInfo!
  edges: [BusinessEdge]!
  aggregate: AggregateBusiness!
}

input BusinessCreateInput {
  id: ID
  name: String!
  industry: IndustryCreateOneInput!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_details: FundDetailCreateOneInput
  fund_status: FundStatus
  user: UserCreateOneWithoutBusinessesInput!
}

input BusinessCreateManyWithoutUserInput {
  create: [BusinessCreateWithoutUserInput!]
  connect: [BusinessWhereUniqueInput!]
}

input BusinessCreateWithoutUserInput {
  id: ID
  name: String!
  industry: IndustryCreateOneInput!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_details: FundDetailCreateOneInput
  fund_status: FundStatus
}

type BusinessEdge {
  node: Business!
  cursor: String!
}

enum BusinessOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  registration_type_ASC
  registration_type_DESC
  registation_id_ASC
  registation_id_DESC
  business_start_year_ASC
  business_start_year_DESC
  bank_verification_number_ASC
  bank_verification_number_DESC
  fund_status_ASC
  fund_status_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
}

type BusinessPreviousValues {
  id: ID!
  name: String!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_status: FundStatus!
  created_at: DateTime!
  updated_at: DateTime!
}

input BusinessScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  registration_type: String
  registration_type_not: String
  registration_type_in: [String!]
  registration_type_not_in: [String!]
  registration_type_lt: String
  registration_type_lte: String
  registration_type_gt: String
  registration_type_gte: String
  registration_type_contains: String
  registration_type_not_contains: String
  registration_type_starts_with: String
  registration_type_not_starts_with: String
  registration_type_ends_with: String
  registration_type_not_ends_with: String
  registation_id: String
  registation_id_not: String
  registation_id_in: [String!]
  registation_id_not_in: [String!]
  registation_id_lt: String
  registation_id_lte: String
  registation_id_gt: String
  registation_id_gte: String
  registation_id_contains: String
  registation_id_not_contains: String
  registation_id_starts_with: String
  registation_id_not_starts_with: String
  registation_id_ends_with: String
  registation_id_not_ends_with: String
  business_start_year: DateTime
  business_start_year_not: DateTime
  business_start_year_in: [DateTime!]
  business_start_year_not_in: [DateTime!]
  business_start_year_lt: DateTime
  business_start_year_lte: DateTime
  business_start_year_gt: DateTime
  business_start_year_gte: DateTime
  bank_verification_number: String
  bank_verification_number_not: String
  bank_verification_number_in: [String!]
  bank_verification_number_not_in: [String!]
  bank_verification_number_lt: String
  bank_verification_number_lte: String
  bank_verification_number_gt: String
  bank_verification_number_gte: String
  bank_verification_number_contains: String
  bank_verification_number_not_contains: String
  bank_verification_number_starts_with: String
  bank_verification_number_not_starts_with: String
  bank_verification_number_ends_with: String
  bank_verification_number_not_ends_with: String
  fund_status: FundStatus
  fund_status_not: FundStatus
  fund_status_in: [FundStatus!]
  fund_status_not_in: [FundStatus!]
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  AND: [BusinessScalarWhereInput!]
  OR: [BusinessScalarWhereInput!]
  NOT: [BusinessScalarWhereInput!]
}

type BusinessSubscriptionPayload {
  mutation: MutationType!
  node: Business
  updatedFields: [String!]
  previousValues: BusinessPreviousValues
}

input BusinessSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BusinessWhereInput
  AND: [BusinessSubscriptionWhereInput!]
  OR: [BusinessSubscriptionWhereInput!]
  NOT: [BusinessSubscriptionWhereInput!]
}

input BusinessUpdateInput {
  name: String
  industry: IndustryUpdateOneRequiredInput
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_details: FundDetailUpdateOneInput
  fund_status: FundStatus
  user: UserUpdateOneRequiredWithoutBusinessesInput
}

input BusinessUpdateManyDataInput {
  name: String
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_status: FundStatus
}

input BusinessUpdateManyMutationInput {
  name: String
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_status: FundStatus
}

input BusinessUpdateManyWithoutUserInput {
  create: [BusinessCreateWithoutUserInput!]
  delete: [BusinessWhereUniqueInput!]
  connect: [BusinessWhereUniqueInput!]
  set: [BusinessWhereUniqueInput!]
  disconnect: [BusinessWhereUniqueInput!]
  update: [BusinessUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [BusinessUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [BusinessScalarWhereInput!]
  updateMany: [BusinessUpdateManyWithWhereNestedInput!]
}

input BusinessUpdateManyWithWhereNestedInput {
  where: BusinessScalarWhereInput!
  data: BusinessUpdateManyDataInput!
}

input BusinessUpdateWithoutUserDataInput {
  name: String
  industry: IndustryUpdateOneRequiredInput
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_details: FundDetailUpdateOneInput
  fund_status: FundStatus
}

input BusinessUpdateWithWhereUniqueWithoutUserInput {
  where: BusinessWhereUniqueInput!
  data: BusinessUpdateWithoutUserDataInput!
}

input BusinessUpsertWithWhereUniqueWithoutUserInput {
  where: BusinessWhereUniqueInput!
  update: BusinessUpdateWithoutUserDataInput!
  create: BusinessCreateWithoutUserInput!
}

input BusinessWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  industry: IndustryWhereInput
  registration_type: String
  registration_type_not: String
  registration_type_in: [String!]
  registration_type_not_in: [String!]
  registration_type_lt: String
  registration_type_lte: String
  registration_type_gt: String
  registration_type_gte: String
  registration_type_contains: String
  registration_type_not_contains: String
  registration_type_starts_with: String
  registration_type_not_starts_with: String
  registration_type_ends_with: String
  registration_type_not_ends_with: String
  registation_id: String
  registation_id_not: String
  registation_id_in: [String!]
  registation_id_not_in: [String!]
  registation_id_lt: String
  registation_id_lte: String
  registation_id_gt: String
  registation_id_gte: String
  registation_id_contains: String
  registation_id_not_contains: String
  registation_id_starts_with: String
  registation_id_not_starts_with: String
  registation_id_ends_with: String
  registation_id_not_ends_with: String
  business_start_year: DateTime
  business_start_year_not: DateTime
  business_start_year_in: [DateTime!]
  business_start_year_not_in: [DateTime!]
  business_start_year_lt: DateTime
  business_start_year_lte: DateTime
  business_start_year_gt: DateTime
  business_start_year_gte: DateTime
  bank_verification_number: String
  bank_verification_number_not: String
  bank_verification_number_in: [String!]
  bank_verification_number_not_in: [String!]
  bank_verification_number_lt: String
  bank_verification_number_lte: String
  bank_verification_number_gt: String
  bank_verification_number_gte: String
  bank_verification_number_contains: String
  bank_verification_number_not_contains: String
  bank_verification_number_starts_with: String
  bank_verification_number_not_starts_with: String
  bank_verification_number_ends_with: String
  bank_verification_number_not_ends_with: String
  fund_details: FundDetailWhereInput
  fund_status: FundStatus
  fund_status_not: FundStatus
  fund_status_in: [FundStatus!]
  fund_status_not_in: [FundStatus!]
  user: UserWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  AND: [BusinessWhereInput!]
  OR: [BusinessWhereInput!]
  NOT: [BusinessWhereInput!]
}

input BusinessWhereUniqueInput {
  id: ID
  registation_id: String
  bank_verification_number: String
}

scalar DateTime

type FundDetail {
  id: ID!
  type: FundType!
  reason: String!
  payment_due_date: String
  disbursement_date: DateTime!
  amount: Float!
}

type FundDetailConnection {
  pageInfo: PageInfo!
  edges: [FundDetailEdge]!
  aggregate: AggregateFundDetail!
}

input FundDetailCreateInput {
  id: ID
  type: FundTypeCreateOneInput!
  reason: String!
  payment_due_date: String
  disbursement_date: DateTime!
  amount: Float!
}

input FundDetailCreateOneInput {
  create: FundDetailCreateInput
  connect: FundDetailWhereUniqueInput
}

type FundDetailEdge {
  node: FundDetail!
  cursor: String!
}

enum FundDetailOrderByInput {
  id_ASC
  id_DESC
  reason_ASC
  reason_DESC
  payment_due_date_ASC
  payment_due_date_DESC
  disbursement_date_ASC
  disbursement_date_DESC
  amount_ASC
  amount_DESC
}

type FundDetailPreviousValues {
  id: ID!
  reason: String!
  payment_due_date: String
  disbursement_date: DateTime!
  amount: Float!
}

type FundDetailSubscriptionPayload {
  mutation: MutationType!
  node: FundDetail
  updatedFields: [String!]
  previousValues: FundDetailPreviousValues
}

input FundDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FundDetailWhereInput
  AND: [FundDetailSubscriptionWhereInput!]
  OR: [FundDetailSubscriptionWhereInput!]
  NOT: [FundDetailSubscriptionWhereInput!]
}

input FundDetailUpdateDataInput {
  type: FundTypeUpdateOneRequiredInput
  reason: String
  payment_due_date: String
  disbursement_date: DateTime
  amount: Float
}

input FundDetailUpdateInput {
  type: FundTypeUpdateOneRequiredInput
  reason: String
  payment_due_date: String
  disbursement_date: DateTime
  amount: Float
}

input FundDetailUpdateManyMutationInput {
  reason: String
  payment_due_date: String
  disbursement_date: DateTime
  amount: Float
}

input FundDetailUpdateOneInput {
  create: FundDetailCreateInput
  update: FundDetailUpdateDataInput
  upsert: FundDetailUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: FundDetailWhereUniqueInput
}

input FundDetailUpsertNestedInput {
  update: FundDetailUpdateDataInput!
  create: FundDetailCreateInput!
}

input FundDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: FundTypeWhereInput
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  payment_due_date: String
  payment_due_date_not: String
  payment_due_date_in: [String!]
  payment_due_date_not_in: [String!]
  payment_due_date_lt: String
  payment_due_date_lte: String
  payment_due_date_gt: String
  payment_due_date_gte: String
  payment_due_date_contains: String
  payment_due_date_not_contains: String
  payment_due_date_starts_with: String
  payment_due_date_not_starts_with: String
  payment_due_date_ends_with: String
  payment_due_date_not_ends_with: String
  disbursement_date: DateTime
  disbursement_date_not: DateTime
  disbursement_date_in: [DateTime!]
  disbursement_date_not_in: [DateTime!]
  disbursement_date_lt: DateTime
  disbursement_date_lte: DateTime
  disbursement_date_gt: DateTime
  disbursement_date_gte: DateTime
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [FundDetailWhereInput!]
  OR: [FundDetailWhereInput!]
  NOT: [FundDetailWhereInput!]
}

input FundDetailWhereUniqueInput {
  id: ID
}

enum FundStatus {
  PENDING
  APPROVED
  REJECTED
}

type FundType {
  id: ID!
  name: String!
}

type FundTypeConnection {
  pageInfo: PageInfo!
  edges: [FundTypeEdge]!
  aggregate: AggregateFundType!
}

input FundTypeCreateInput {
  id: ID
  name: String!
}

input FundTypeCreateManyInput {
  create: [FundTypeCreateInput!]
  connect: [FundTypeWhereUniqueInput!]
}

input FundTypeCreateOneInput {
  create: FundTypeCreateInput
  connect: FundTypeWhereUniqueInput
}

type FundTypeEdge {
  node: FundType!
  cursor: String!
}

enum FundTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type FundTypePreviousValues {
  id: ID!
  name: String!
}

input FundTypeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [FundTypeScalarWhereInput!]
  OR: [FundTypeScalarWhereInput!]
  NOT: [FundTypeScalarWhereInput!]
}

type FundTypeSubscriptionPayload {
  mutation: MutationType!
  node: FundType
  updatedFields: [String!]
  previousValues: FundTypePreviousValues
}

input FundTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FundTypeWhereInput
  AND: [FundTypeSubscriptionWhereInput!]
  OR: [FundTypeSubscriptionWhereInput!]
  NOT: [FundTypeSubscriptionWhereInput!]
}

input FundTypeUpdateDataInput {
  name: String
}

input FundTypeUpdateInput {
  name: String
}

input FundTypeUpdateManyDataInput {
  name: String
}

input FundTypeUpdateManyInput {
  create: [FundTypeCreateInput!]
  update: [FundTypeUpdateWithWhereUniqueNestedInput!]
  upsert: [FundTypeUpsertWithWhereUniqueNestedInput!]
  delete: [FundTypeWhereUniqueInput!]
  connect: [FundTypeWhereUniqueInput!]
  set: [FundTypeWhereUniqueInput!]
  disconnect: [FundTypeWhereUniqueInput!]
  deleteMany: [FundTypeScalarWhereInput!]
  updateMany: [FundTypeUpdateManyWithWhereNestedInput!]
}

input FundTypeUpdateManyMutationInput {
  name: String
}

input FundTypeUpdateManyWithWhereNestedInput {
  where: FundTypeScalarWhereInput!
  data: FundTypeUpdateManyDataInput!
}

input FundTypeUpdateOneRequiredInput {
  create: FundTypeCreateInput
  update: FundTypeUpdateDataInput
  upsert: FundTypeUpsertNestedInput
  connect: FundTypeWhereUniqueInput
}

input FundTypeUpdateWithWhereUniqueNestedInput {
  where: FundTypeWhereUniqueInput!
  data: FundTypeUpdateDataInput!
}

input FundTypeUpsertNestedInput {
  update: FundTypeUpdateDataInput!
  create: FundTypeCreateInput!
}

input FundTypeUpsertWithWhereUniqueNestedInput {
  where: FundTypeWhereUniqueInput!
  update: FundTypeUpdateDataInput!
  create: FundTypeCreateInput!
}

input FundTypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [FundTypeWhereInput!]
  OR: [FundTypeWhereInput!]
  NOT: [FundTypeWhereInput!]
}

input FundTypeWhereUniqueInput {
  id: ID
  name: String
}

enum Gender {
  MALE
  FEMALE
}

type Industry {
  id: ID!
  name: String!
}

type IndustryConnection {
  pageInfo: PageInfo!
  edges: [IndustryEdge]!
  aggregate: AggregateIndustry!
}

input IndustryCreateInput {
  id: ID
  name: String!
}

input IndustryCreateManyInput {
  create: [IndustryCreateInput!]
  connect: [IndustryWhereUniqueInput!]
}

input IndustryCreateOneInput {
  create: IndustryCreateInput
  connect: IndustryWhereUniqueInput
}

type IndustryEdge {
  node: Industry!
  cursor: String!
}

enum IndustryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type IndustryPreviousValues {
  id: ID!
  name: String!
}

input IndustryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [IndustryScalarWhereInput!]
  OR: [IndustryScalarWhereInput!]
  NOT: [IndustryScalarWhereInput!]
}

type IndustrySubscriptionPayload {
  mutation: MutationType!
  node: Industry
  updatedFields: [String!]
  previousValues: IndustryPreviousValues
}

input IndustrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryWhereInput
  AND: [IndustrySubscriptionWhereInput!]
  OR: [IndustrySubscriptionWhereInput!]
  NOT: [IndustrySubscriptionWhereInput!]
}

input IndustryUpdateDataInput {
  name: String
}

input IndustryUpdateInput {
  name: String
}

input IndustryUpdateManyDataInput {
  name: String
}

input IndustryUpdateManyInput {
  create: [IndustryCreateInput!]
  update: [IndustryUpdateWithWhereUniqueNestedInput!]
  upsert: [IndustryUpsertWithWhereUniqueNestedInput!]
  delete: [IndustryWhereUniqueInput!]
  connect: [IndustryWhereUniqueInput!]
  set: [IndustryWhereUniqueInput!]
  disconnect: [IndustryWhereUniqueInput!]
  deleteMany: [IndustryScalarWhereInput!]
  updateMany: [IndustryUpdateManyWithWhereNestedInput!]
}

input IndustryUpdateManyMutationInput {
  name: String
}

input IndustryUpdateManyWithWhereNestedInput {
  where: IndustryScalarWhereInput!
  data: IndustryUpdateManyDataInput!
}

input IndustryUpdateOneRequiredInput {
  create: IndustryCreateInput
  update: IndustryUpdateDataInput
  upsert: IndustryUpsertNestedInput
  connect: IndustryWhereUniqueInput
}

input IndustryUpdateWithWhereUniqueNestedInput {
  where: IndustryWhereUniqueInput!
  data: IndustryUpdateDataInput!
}

input IndustryUpsertNestedInput {
  update: IndustryUpdateDataInput!
  create: IndustryCreateInput!
}

input IndustryUpsertWithWhereUniqueNestedInput {
  where: IndustryWhereUniqueInput!
  update: IndustryUpdateDataInput!
  create: IndustryCreateInput!
}

input IndustryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [IndustryWhereInput!]
  OR: [IndustryWhereInput!]
  NOT: [IndustryWhereInput!]
}

input IndustryWhereUniqueInput {
  id: ID
  name: String
}

type Lender {
  id: ID!
  name: String!
  preffered_industries(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry!]
  fund_types(where: FundTypeWhereInput, orderBy: FundTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FundType!]
  created_at: DateTime!
  updated_at: DateTime!
}

type LenderConnection {
  pageInfo: PageInfo!
  edges: [LenderEdge]!
  aggregate: AggregateLender!
}

input LenderCreateInput {
  id: ID
  name: String!
  preffered_industries: IndustryCreateManyInput
  fund_types: FundTypeCreateManyInput
}

type LenderEdge {
  node: Lender!
  cursor: String!
}

enum LenderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
}

type LenderPreviousValues {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type LenderSubscriptionPayload {
  mutation: MutationType!
  node: Lender
  updatedFields: [String!]
  previousValues: LenderPreviousValues
}

input LenderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LenderWhereInput
  AND: [LenderSubscriptionWhereInput!]
  OR: [LenderSubscriptionWhereInput!]
  NOT: [LenderSubscriptionWhereInput!]
}

input LenderUpdateInput {
  name: String
  preffered_industries: IndustryUpdateManyInput
  fund_types: FundTypeUpdateManyInput
}

input LenderUpdateManyMutationInput {
  name: String
}

input LenderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  preffered_industries_every: IndustryWhereInput
  preffered_industries_some: IndustryWhereInput
  preffered_industries_none: IndustryWhereInput
  fund_types_every: FundTypeWhereInput
  fund_types_some: FundTypeWhereInput
  fund_types_none: FundTypeWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  AND: [LenderWhereInput!]
  OR: [LenderWhereInput!]
  NOT: [LenderWhereInput!]
}

input LenderWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBusiness(data: BusinessCreateInput!): Business!
  updateBusiness(data: BusinessUpdateInput!, where: BusinessWhereUniqueInput!): Business
  updateManyBusinesses(data: BusinessUpdateManyMutationInput!, where: BusinessWhereInput): BatchPayload!
  upsertBusiness(where: BusinessWhereUniqueInput!, create: BusinessCreateInput!, update: BusinessUpdateInput!): Business!
  deleteBusiness(where: BusinessWhereUniqueInput!): Business
  deleteManyBusinesses(where: BusinessWhereInput): BatchPayload!
  createFundDetail(data: FundDetailCreateInput!): FundDetail!
  updateFundDetail(data: FundDetailUpdateInput!, where: FundDetailWhereUniqueInput!): FundDetail
  updateManyFundDetails(data: FundDetailUpdateManyMutationInput!, where: FundDetailWhereInput): BatchPayload!
  upsertFundDetail(where: FundDetailWhereUniqueInput!, create: FundDetailCreateInput!, update: FundDetailUpdateInput!): FundDetail!
  deleteFundDetail(where: FundDetailWhereUniqueInput!): FundDetail
  deleteManyFundDetails(where: FundDetailWhereInput): BatchPayload!
  createFundType(data: FundTypeCreateInput!): FundType!
  updateFundType(data: FundTypeUpdateInput!, where: FundTypeWhereUniqueInput!): FundType
  updateManyFundTypes(data: FundTypeUpdateManyMutationInput!, where: FundTypeWhereInput): BatchPayload!
  upsertFundType(where: FundTypeWhereUniqueInput!, create: FundTypeCreateInput!, update: FundTypeUpdateInput!): FundType!
  deleteFundType(where: FundTypeWhereUniqueInput!): FundType
  deleteManyFundTypes(where: FundTypeWhereInput): BatchPayload!
  createIndustry(data: IndustryCreateInput!): Industry!
  updateIndustry(data: IndustryUpdateInput!, where: IndustryWhereUniqueInput!): Industry
  updateManyIndustries(data: IndustryUpdateManyMutationInput!, where: IndustryWhereInput): BatchPayload!
  upsertIndustry(where: IndustryWhereUniqueInput!, create: IndustryCreateInput!, update: IndustryUpdateInput!): Industry!
  deleteIndustry(where: IndustryWhereUniqueInput!): Industry
  deleteManyIndustries(where: IndustryWhereInput): BatchPayload!
  createLender(data: LenderCreateInput!): Lender!
  updateLender(data: LenderUpdateInput!, where: LenderWhereUniqueInput!): Lender
  updateManyLenders(data: LenderUpdateManyMutationInput!, where: LenderWhereInput): BatchPayload!
  upsertLender(where: LenderWhereUniqueInput!, create: LenderCreateInput!, update: LenderUpdateInput!): Lender!
  deleteLender(where: LenderWhereUniqueInput!): Lender
  deleteManyLenders(where: LenderWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  business(where: BusinessWhereUniqueInput!): Business
  businesses(where: BusinessWhereInput, orderBy: BusinessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Business]!
  businessesConnection(where: BusinessWhereInput, orderBy: BusinessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BusinessConnection!
  fundDetail(where: FundDetailWhereUniqueInput!): FundDetail
  fundDetails(where: FundDetailWhereInput, orderBy: FundDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FundDetail]!
  fundDetailsConnection(where: FundDetailWhereInput, orderBy: FundDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FundDetailConnection!
  fundType(where: FundTypeWhereUniqueInput!): FundType
  fundTypes(where: FundTypeWhereInput, orderBy: FundTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FundType]!
  fundTypesConnection(where: FundTypeWhereInput, orderBy: FundTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FundTypeConnection!
  industry(where: IndustryWhereUniqueInput!): Industry
  industries(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry]!
  industriesConnection(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryConnection!
  lender(where: LenderWhereUniqueInput!): Lender
  lenders(where: LenderWhereInput, orderBy: LenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lender]!
  lendersConnection(where: LenderWhereInput, orderBy: LenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LenderConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  business(where: BusinessSubscriptionWhereInput): BusinessSubscriptionPayload
  fundDetail(where: FundDetailSubscriptionWhereInput): FundDetailSubscriptionPayload
  fundType(where: FundTypeSubscriptionWhereInput): FundTypeSubscriptionPayload
  industry(where: IndustrySubscriptionWhereInput): IndustrySubscriptionPayload
  lender(where: LenderSubscriptionWhereInput): LenderSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  first_name: String!
  last_name: String!
  date_of_birth: DateTime!
  gender: Gender!
  phone_number: String!
  home_address: String!
  state: String!
  businesses(where: BusinessWhereInput, orderBy: BusinessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Business!]
  created_at: DateTime!
  updated_at: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  first_name: String!
  last_name: String!
  date_of_birth: DateTime!
  gender: Gender!
  phone_number: String!
  home_address: String!
  state: String!
  businesses: BusinessCreateManyWithoutUserInput
}

input UserCreateOneWithoutBusinessesInput {
  create: UserCreateWithoutBusinessesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBusinessesInput {
  id: ID
  first_name: String!
  last_name: String!
  date_of_birth: DateTime!
  gender: Gender!
  phone_number: String!
  home_address: String!
  state: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  date_of_birth_ASC
  date_of_birth_DESC
  gender_ASC
  gender_DESC
  phone_number_ASC
  phone_number_DESC
  home_address_ASC
  home_address_DESC
  state_ASC
  state_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
}

type UserPreviousValues {
  id: ID!
  first_name: String!
  last_name: String!
  date_of_birth: DateTime!
  gender: Gender!
  phone_number: String!
  home_address: String!
  state: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  first_name: String
  last_name: String
  date_of_birth: DateTime
  gender: Gender
  phone_number: String
  home_address: String
  state: String
  businesses: BusinessUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  first_name: String
  last_name: String
  date_of_birth: DateTime
  gender: Gender
  phone_number: String
  home_address: String
  state: String
}

input UserUpdateOneRequiredWithoutBusinessesInput {
  create: UserCreateWithoutBusinessesInput
  update: UserUpdateWithoutBusinessesDataInput
  upsert: UserUpsertWithoutBusinessesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBusinessesDataInput {
  first_name: String
  last_name: String
  date_of_birth: DateTime
  gender: Gender
  phone_number: String
  home_address: String
  state: String
}

input UserUpsertWithoutBusinessesInput {
  update: UserUpdateWithoutBusinessesDataInput!
  create: UserCreateWithoutBusinessesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  date_of_birth: DateTime
  date_of_birth_not: DateTime
  date_of_birth_in: [DateTime!]
  date_of_birth_not_in: [DateTime!]
  date_of_birth_lt: DateTime
  date_of_birth_lte: DateTime
  date_of_birth_gt: DateTime
  date_of_birth_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  phone_number: String
  phone_number_not: String
  phone_number_in: [String!]
  phone_number_not_in: [String!]
  phone_number_lt: String
  phone_number_lte: String
  phone_number_gt: String
  phone_number_gte: String
  phone_number_contains: String
  phone_number_not_contains: String
  phone_number_starts_with: String
  phone_number_not_starts_with: String
  phone_number_ends_with: String
  phone_number_not_ends_with: String
  home_address: String
  home_address_not: String
  home_address_in: [String!]
  home_address_not_in: [String!]
  home_address_lt: String
  home_address_lte: String
  home_address_gt: String
  home_address_gte: String
  home_address_contains: String
  home_address_not_contains: String
  home_address_starts_with: String
  home_address_not_starts_with: String
  home_address_ends_with: String
  home_address_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  businesses_every: BusinessWhereInput
  businesses_some: BusinessWhereInput
  businesses_none: BusinessWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    