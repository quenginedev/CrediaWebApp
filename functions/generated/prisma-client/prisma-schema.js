module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateApplication {
  count: Int!
}

type AggregateAuth {
  count: Int!
}

type AggregateBusinessDetail {
  count: Int!
}

type AggregateFinanceOption {
  count: Int!
}

type AggregateFundDetail {
  count: Int!
}

type AggregateFundRange {
  count: Int!
}

type AggregateIndustry {
  count: Int!
}

type AggregateNextOfKinDetail {
  count: Int!
}

type AggregatePersonalDetail {
  count: Int!
}

type AggregateSocialMedia {
  count: Int!
}

type Application {
  id: ID!
  auth: Auth!
  personal_details: PersonalDetail!
  next_of_kin: NextOfKinDetail!
  business_details: BusinessDetail!
  finance_options: FinanceOption!
}

type ApplicationConnection {
  pageInfo: PageInfo!
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  id: ID
  auth: AuthCreateOneWithoutApplicationsInput!
  personal_details: PersonalDetailCreateOneInput!
  next_of_kin: NextOfKinDetailCreateOneInput!
  business_details: BusinessDetailCreateOneWithoutApplicationInput!
  finance_options: FinanceOptionCreateOneWithoutApplicationInput!
}

input ApplicationCreateManyWithoutAuthInput {
  create: [ApplicationCreateWithoutAuthInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateOneWithoutBusiness_detailsInput {
  create: ApplicationCreateWithoutBusiness_detailsInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationCreateOneWithoutFinance_optionsInput {
  create: ApplicationCreateWithoutFinance_optionsInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationCreateWithoutAuthInput {
  id: ID
  personal_details: PersonalDetailCreateOneInput!
  next_of_kin: NextOfKinDetailCreateOneInput!
  business_details: BusinessDetailCreateOneWithoutApplicationInput!
  finance_options: FinanceOptionCreateOneWithoutApplicationInput!
}

input ApplicationCreateWithoutBusiness_detailsInput {
  id: ID
  auth: AuthCreateOneWithoutApplicationsInput!
  personal_details: PersonalDetailCreateOneInput!
  next_of_kin: NextOfKinDetailCreateOneInput!
  finance_options: FinanceOptionCreateOneWithoutApplicationInput!
}

input ApplicationCreateWithoutFinance_optionsInput {
  id: ID
  auth: AuthCreateOneWithoutApplicationsInput!
  personal_details: PersonalDetailCreateOneInput!
  next_of_kin: NextOfKinDetailCreateOneInput!
  business_details: BusinessDetailCreateOneWithoutApplicationInput!
}

type ApplicationEdge {
  node: Application!
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
}

type ApplicationPreviousValues {
  id: ID!
}

input ApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
  AND: [ApplicationSubscriptionWhereInput!]
  OR: [ApplicationSubscriptionWhereInput!]
  NOT: [ApplicationSubscriptionWhereInput!]
}

input ApplicationUpdateInput {
  auth: AuthUpdateOneRequiredWithoutApplicationsInput
  personal_details: PersonalDetailUpdateOneRequiredInput
  next_of_kin: NextOfKinDetailUpdateOneRequiredInput
  business_details: BusinessDetailUpdateOneRequiredWithoutApplicationInput
  finance_options: FinanceOptionUpdateOneRequiredWithoutApplicationInput
}

input ApplicationUpdateManyWithoutAuthInput {
  create: [ApplicationCreateWithoutAuthInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutAuthInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutAuthInput!]
  deleteMany: [ApplicationScalarWhereInput!]
}

input ApplicationUpdateOneRequiredWithoutBusiness_detailsInput {
  create: ApplicationCreateWithoutBusiness_detailsInput
  update: ApplicationUpdateWithoutBusiness_detailsDataInput
  upsert: ApplicationUpsertWithoutBusiness_detailsInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationUpdateOneRequiredWithoutFinance_optionsInput {
  create: ApplicationCreateWithoutFinance_optionsInput
  update: ApplicationUpdateWithoutFinance_optionsDataInput
  upsert: ApplicationUpsertWithoutFinance_optionsInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationUpdateWithoutAuthDataInput {
  personal_details: PersonalDetailUpdateOneRequiredInput
  next_of_kin: NextOfKinDetailUpdateOneRequiredInput
  business_details: BusinessDetailUpdateOneRequiredWithoutApplicationInput
  finance_options: FinanceOptionUpdateOneRequiredWithoutApplicationInput
}

input ApplicationUpdateWithoutBusiness_detailsDataInput {
  auth: AuthUpdateOneRequiredWithoutApplicationsInput
  personal_details: PersonalDetailUpdateOneRequiredInput
  next_of_kin: NextOfKinDetailUpdateOneRequiredInput
  finance_options: FinanceOptionUpdateOneRequiredWithoutApplicationInput
}

input ApplicationUpdateWithoutFinance_optionsDataInput {
  auth: AuthUpdateOneRequiredWithoutApplicationsInput
  personal_details: PersonalDetailUpdateOneRequiredInput
  next_of_kin: NextOfKinDetailUpdateOneRequiredInput
  business_details: BusinessDetailUpdateOneRequiredWithoutApplicationInput
}

input ApplicationUpdateWithWhereUniqueWithoutAuthInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutAuthDataInput!
}

input ApplicationUpsertWithoutBusiness_detailsInput {
  update: ApplicationUpdateWithoutBusiness_detailsDataInput!
  create: ApplicationCreateWithoutBusiness_detailsInput!
}

input ApplicationUpsertWithoutFinance_optionsInput {
  update: ApplicationUpdateWithoutFinance_optionsDataInput!
  create: ApplicationCreateWithoutFinance_optionsInput!
}

input ApplicationUpsertWithWhereUniqueWithoutAuthInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutAuthDataInput!
  create: ApplicationCreateWithoutAuthInput!
}

input ApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  auth: AuthWhereInput
  personal_details: PersonalDetailWhereInput
  next_of_kin: NextOfKinDetailWhereInput
  business_details: BusinessDetailWhereInput
  finance_options: FinanceOptionWhereInput
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
}

input ApplicationWhereUniqueInput {
  id: ID
}

type Auth {
  id: ID!
  firebase_id: String!
  email: String!
  details: PersonalDetail
  social_media(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialMedia!]
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application!]
  created_at: DateTime!
  updated_at: DateTime!
}

type AuthConnection {
  pageInfo: PageInfo!
  edges: [AuthEdge]!
  aggregate: AggregateAuth!
}

input AuthCreateInput {
  id: ID
  firebase_id: String!
  email: String!
  details: PersonalDetailCreateOneWithoutAuth_idInput
  social_media: SocialMediaCreateManyWithoutAuthInput
  applications: ApplicationCreateManyWithoutAuthInput
}

input AuthCreateOneWithoutApplicationsInput {
  create: AuthCreateWithoutApplicationsInput
  connect: AuthWhereUniqueInput
}

input AuthCreateOneWithoutDetailsInput {
  create: AuthCreateWithoutDetailsInput
  connect: AuthWhereUniqueInput
}

input AuthCreateOneWithoutSocial_mediaInput {
  create: AuthCreateWithoutSocial_mediaInput
  connect: AuthWhereUniqueInput
}

input AuthCreateWithoutApplicationsInput {
  id: ID
  firebase_id: String!
  email: String!
  details: PersonalDetailCreateOneWithoutAuth_idInput
  social_media: SocialMediaCreateManyWithoutAuthInput
}

input AuthCreateWithoutDetailsInput {
  id: ID
  firebase_id: String!
  email: String!
  social_media: SocialMediaCreateManyWithoutAuthInput
  applications: ApplicationCreateManyWithoutAuthInput
}

input AuthCreateWithoutSocial_mediaInput {
  id: ID
  firebase_id: String!
  email: String!
  details: PersonalDetailCreateOneWithoutAuth_idInput
  applications: ApplicationCreateManyWithoutAuthInput
}

type AuthEdge {
  node: Auth!
  cursor: String!
}

enum AuthOrderByInput {
  id_ASC
  id_DESC
  firebase_id_ASC
  firebase_id_DESC
  email_ASC
  email_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
}

type AuthPreviousValues {
  id: ID!
  firebase_id: String!
  email: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type AuthSubscriptionPayload {
  mutation: MutationType!
  node: Auth
  updatedFields: [String!]
  previousValues: AuthPreviousValues
}

input AuthSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthWhereInput
  AND: [AuthSubscriptionWhereInput!]
  OR: [AuthSubscriptionWhereInput!]
  NOT: [AuthSubscriptionWhereInput!]
}

input AuthUpdateInput {
  firebase_id: String
  email: String
  details: PersonalDetailUpdateOneWithoutAuth_idInput
  social_media: SocialMediaUpdateManyWithoutAuthInput
  applications: ApplicationUpdateManyWithoutAuthInput
}

input AuthUpdateManyMutationInput {
  firebase_id: String
  email: String
}

input AuthUpdateOneRequiredWithoutApplicationsInput {
  create: AuthCreateWithoutApplicationsInput
  update: AuthUpdateWithoutApplicationsDataInput
  upsert: AuthUpsertWithoutApplicationsInput
  connect: AuthWhereUniqueInput
}

input AuthUpdateOneRequiredWithoutDetailsInput {
  create: AuthCreateWithoutDetailsInput
  update: AuthUpdateWithoutDetailsDataInput
  upsert: AuthUpsertWithoutDetailsInput
  connect: AuthWhereUniqueInput
}

input AuthUpdateOneRequiredWithoutSocial_mediaInput {
  create: AuthCreateWithoutSocial_mediaInput
  update: AuthUpdateWithoutSocial_mediaDataInput
  upsert: AuthUpsertWithoutSocial_mediaInput
  connect: AuthWhereUniqueInput
}

input AuthUpdateWithoutApplicationsDataInput {
  firebase_id: String
  email: String
  details: PersonalDetailUpdateOneWithoutAuth_idInput
  social_media: SocialMediaUpdateManyWithoutAuthInput
}

input AuthUpdateWithoutDetailsDataInput {
  firebase_id: String
  email: String
  social_media: SocialMediaUpdateManyWithoutAuthInput
  applications: ApplicationUpdateManyWithoutAuthInput
}

input AuthUpdateWithoutSocial_mediaDataInput {
  firebase_id: String
  email: String
  details: PersonalDetailUpdateOneWithoutAuth_idInput
  applications: ApplicationUpdateManyWithoutAuthInput
}

input AuthUpsertWithoutApplicationsInput {
  update: AuthUpdateWithoutApplicationsDataInput!
  create: AuthCreateWithoutApplicationsInput!
}

input AuthUpsertWithoutDetailsInput {
  update: AuthUpdateWithoutDetailsDataInput!
  create: AuthCreateWithoutDetailsInput!
}

input AuthUpsertWithoutSocial_mediaInput {
  update: AuthUpdateWithoutSocial_mediaDataInput!
  create: AuthCreateWithoutSocial_mediaInput!
}

input AuthWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firebase_id: String
  firebase_id_not: String
  firebase_id_in: [String!]
  firebase_id_not_in: [String!]
  firebase_id_lt: String
  firebase_id_lte: String
  firebase_id_gt: String
  firebase_id_gte: String
  firebase_id_contains: String
  firebase_id_not_contains: String
  firebase_id_starts_with: String
  firebase_id_not_starts_with: String
  firebase_id_ends_with: String
  firebase_id_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  details: PersonalDetailWhereInput
  social_media_every: SocialMediaWhereInput
  social_media_some: SocialMediaWhereInput
  social_media_none: SocialMediaWhereInput
  applications_every: ApplicationWhereInput
  applications_some: ApplicationWhereInput
  applications_none: ApplicationWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  AND: [AuthWhereInput!]
  OR: [AuthWhereInput!]
  NOT: [AuthWhereInput!]
}

input AuthWhereUniqueInput {
  id: ID
  firebase_id: String
  email: String
}

type BatchPayload {
  count: Long!
}

type BusinessDetail {
  id: ID!
  name: String!
  industry_type: String!
  business_type: String!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_details: FundDetail
  fund_status: FundStatus!
  application: Application!
  created_at: DateTime!
  updated_at: DateTime!
}

type BusinessDetailConnection {
  pageInfo: PageInfo!
  edges: [BusinessDetailEdge]!
  aggregate: AggregateBusinessDetail!
}

input BusinessDetailCreateInput {
  id: ID
  name: String!
  industry_type: String!
  business_type: String!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_details: FundDetailCreateOneInput
  fund_status: FundStatus
  application: ApplicationCreateOneWithoutBusiness_detailsInput!
}

input BusinessDetailCreateOneWithoutApplicationInput {
  create: BusinessDetailCreateWithoutApplicationInput
  connect: BusinessDetailWhereUniqueInput
}

input BusinessDetailCreateWithoutApplicationInput {
  id: ID
  name: String!
  industry_type: String!
  business_type: String!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_details: FundDetailCreateOneInput
  fund_status: FundStatus
}

type BusinessDetailEdge {
  node: BusinessDetail!
  cursor: String!
}

enum BusinessDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  industry_type_ASC
  industry_type_DESC
  business_type_ASC
  business_type_DESC
  registration_type_ASC
  registration_type_DESC
  registation_id_ASC
  registation_id_DESC
  business_start_year_ASC
  business_start_year_DESC
  bank_verification_number_ASC
  bank_verification_number_DESC
  fund_status_ASC
  fund_status_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
}

type BusinessDetailPreviousValues {
  id: ID!
  name: String!
  industry_type: String!
  business_type: String!
  registration_type: String!
  registation_id: String!
  business_start_year: DateTime!
  bank_verification_number: String!
  fund_status: FundStatus!
  created_at: DateTime!
  updated_at: DateTime!
}

type BusinessDetailSubscriptionPayload {
  mutation: MutationType!
  node: BusinessDetail
  updatedFields: [String!]
  previousValues: BusinessDetailPreviousValues
}

input BusinessDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BusinessDetailWhereInput
  AND: [BusinessDetailSubscriptionWhereInput!]
  OR: [BusinessDetailSubscriptionWhereInput!]
  NOT: [BusinessDetailSubscriptionWhereInput!]
}

input BusinessDetailUpdateInput {
  name: String
  industry_type: String
  business_type: String
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_details: FundDetailUpdateOneInput
  fund_status: FundStatus
  application: ApplicationUpdateOneRequiredWithoutBusiness_detailsInput
}

input BusinessDetailUpdateManyMutationInput {
  name: String
  industry_type: String
  business_type: String
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_status: FundStatus
}

input BusinessDetailUpdateOneRequiredWithoutApplicationInput {
  create: BusinessDetailCreateWithoutApplicationInput
  update: BusinessDetailUpdateWithoutApplicationDataInput
  upsert: BusinessDetailUpsertWithoutApplicationInput
  connect: BusinessDetailWhereUniqueInput
}

input BusinessDetailUpdateWithoutApplicationDataInput {
  name: String
  industry_type: String
  business_type: String
  registration_type: String
  registation_id: String
  business_start_year: DateTime
  bank_verification_number: String
  fund_details: FundDetailUpdateOneInput
  fund_status: FundStatus
}

input BusinessDetailUpsertWithoutApplicationInput {
  update: BusinessDetailUpdateWithoutApplicationDataInput!
  create: BusinessDetailCreateWithoutApplicationInput!
}

input BusinessDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  industry_type: String
  industry_type_not: String
  industry_type_in: [String!]
  industry_type_not_in: [String!]
  industry_type_lt: String
  industry_type_lte: String
  industry_type_gt: String
  industry_type_gte: String
  industry_type_contains: String
  industry_type_not_contains: String
  industry_type_starts_with: String
  industry_type_not_starts_with: String
  industry_type_ends_with: String
  industry_type_not_ends_with: String
  business_type: String
  business_type_not: String
  business_type_in: [String!]
  business_type_not_in: [String!]
  business_type_lt: String
  business_type_lte: String
  business_type_gt: String
  business_type_gte: String
  business_type_contains: String
  business_type_not_contains: String
  business_type_starts_with: String
  business_type_not_starts_with: String
  business_type_ends_with: String
  business_type_not_ends_with: String
  registration_type: String
  registration_type_not: String
  registration_type_in: [String!]
  registration_type_not_in: [String!]
  registration_type_lt: String
  registration_type_lte: String
  registration_type_gt: String
  registration_type_gte: String
  registration_type_contains: String
  registration_type_not_contains: String
  registration_type_starts_with: String
  registration_type_not_starts_with: String
  registration_type_ends_with: String
  registration_type_not_ends_with: String
  registation_id: String
  registation_id_not: String
  registation_id_in: [String!]
  registation_id_not_in: [String!]
  registation_id_lt: String
  registation_id_lte: String
  registation_id_gt: String
  registation_id_gte: String
  registation_id_contains: String
  registation_id_not_contains: String
  registation_id_starts_with: String
  registation_id_not_starts_with: String
  registation_id_ends_with: String
  registation_id_not_ends_with: String
  business_start_year: DateTime
  business_start_year_not: DateTime
  business_start_year_in: [DateTime!]
  business_start_year_not_in: [DateTime!]
  business_start_year_lt: DateTime
  business_start_year_lte: DateTime
  business_start_year_gt: DateTime
  business_start_year_gte: DateTime
  bank_verification_number: String
  bank_verification_number_not: String
  bank_verification_number_in: [String!]
  bank_verification_number_not_in: [String!]
  bank_verification_number_lt: String
  bank_verification_number_lte: String
  bank_verification_number_gt: String
  bank_verification_number_gte: String
  bank_verification_number_contains: String
  bank_verification_number_not_contains: String
  bank_verification_number_starts_with: String
  bank_verification_number_not_starts_with: String
  bank_verification_number_ends_with: String
  bank_verification_number_not_ends_with: String
  fund_details: FundDetailWhereInput
  fund_status: FundStatus
  fund_status_not: FundStatus
  fund_status_in: [FundStatus!]
  fund_status_not_in: [FundStatus!]
  application: ApplicationWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  AND: [BusinessDetailWhereInput!]
  OR: [BusinessDetailWhereInput!]
  NOT: [BusinessDetailWhereInput!]
}

input BusinessDetailWhereUniqueInput {
  id: ID
  registation_id: String
  bank_verification_number: String
}

scalar DateTime

type FinanceOption {
  id: ID!
  fund_type: FundType!
  fund_range: FundRange!
  reason_for_fund: String!
  disbursement_time: DateTime!
  avg_month_rev: Float!
  avg_month_exp: Float!
  is_serving_loan: Boolean!
  application: Application!
}

type FinanceOptionConnection {
  pageInfo: PageInfo!
  edges: [FinanceOptionEdge]!
  aggregate: AggregateFinanceOption!
}

input FinanceOptionCreateInput {
  id: ID
  fund_type: FundType!
  fund_range: FundRangeCreateOneInput!
  reason_for_fund: String!
  disbursement_time: DateTime!
  avg_month_rev: Float!
  avg_month_exp: Float!
  is_serving_loan: Boolean!
  application: ApplicationCreateOneWithoutFinance_optionsInput!
}

input FinanceOptionCreateOneWithoutApplicationInput {
  create: FinanceOptionCreateWithoutApplicationInput
  connect: FinanceOptionWhereUniqueInput
}

input FinanceOptionCreateWithoutApplicationInput {
  id: ID
  fund_type: FundType!
  fund_range: FundRangeCreateOneInput!
  reason_for_fund: String!
  disbursement_time: DateTime!
  avg_month_rev: Float!
  avg_month_exp: Float!
  is_serving_loan: Boolean!
}

type FinanceOptionEdge {
  node: FinanceOption!
  cursor: String!
}

enum FinanceOptionOrderByInput {
  id_ASC
  id_DESC
  fund_type_ASC
  fund_type_DESC
  reason_for_fund_ASC
  reason_for_fund_DESC
  disbursement_time_ASC
  disbursement_time_DESC
  avg_month_rev_ASC
  avg_month_rev_DESC
  avg_month_exp_ASC
  avg_month_exp_DESC
  is_serving_loan_ASC
  is_serving_loan_DESC
}

type FinanceOptionPreviousValues {
  id: ID!
  fund_type: FundType!
  reason_for_fund: String!
  disbursement_time: DateTime!
  avg_month_rev: Float!
  avg_month_exp: Float!
  is_serving_loan: Boolean!
}

type FinanceOptionSubscriptionPayload {
  mutation: MutationType!
  node: FinanceOption
  updatedFields: [String!]
  previousValues: FinanceOptionPreviousValues
}

input FinanceOptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FinanceOptionWhereInput
  AND: [FinanceOptionSubscriptionWhereInput!]
  OR: [FinanceOptionSubscriptionWhereInput!]
  NOT: [FinanceOptionSubscriptionWhereInput!]
}

input FinanceOptionUpdateInput {
  fund_type: FundType
  fund_range: FundRangeUpdateOneRequiredInput
  reason_for_fund: String
  disbursement_time: DateTime
  avg_month_rev: Float
  avg_month_exp: Float
  is_serving_loan: Boolean
  application: ApplicationUpdateOneRequiredWithoutFinance_optionsInput
}

input FinanceOptionUpdateManyMutationInput {
  fund_type: FundType
  reason_for_fund: String
  disbursement_time: DateTime
  avg_month_rev: Float
  avg_month_exp: Float
  is_serving_loan: Boolean
}

input FinanceOptionUpdateOneRequiredWithoutApplicationInput {
  create: FinanceOptionCreateWithoutApplicationInput
  update: FinanceOptionUpdateWithoutApplicationDataInput
  upsert: FinanceOptionUpsertWithoutApplicationInput
  connect: FinanceOptionWhereUniqueInput
}

input FinanceOptionUpdateWithoutApplicationDataInput {
  fund_type: FundType
  fund_range: FundRangeUpdateOneRequiredInput
  reason_for_fund: String
  disbursement_time: DateTime
  avg_month_rev: Float
  avg_month_exp: Float
  is_serving_loan: Boolean
}

input FinanceOptionUpsertWithoutApplicationInput {
  update: FinanceOptionUpdateWithoutApplicationDataInput!
  create: FinanceOptionCreateWithoutApplicationInput!
}

input FinanceOptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fund_type: FundType
  fund_type_not: FundType
  fund_type_in: [FundType!]
  fund_type_not_in: [FundType!]
  fund_range: FundRangeWhereInput
  reason_for_fund: String
  reason_for_fund_not: String
  reason_for_fund_in: [String!]
  reason_for_fund_not_in: [String!]
  reason_for_fund_lt: String
  reason_for_fund_lte: String
  reason_for_fund_gt: String
  reason_for_fund_gte: String
  reason_for_fund_contains: String
  reason_for_fund_not_contains: String
  reason_for_fund_starts_with: String
  reason_for_fund_not_starts_with: String
  reason_for_fund_ends_with: String
  reason_for_fund_not_ends_with: String
  disbursement_time: DateTime
  disbursement_time_not: DateTime
  disbursement_time_in: [DateTime!]
  disbursement_time_not_in: [DateTime!]
  disbursement_time_lt: DateTime
  disbursement_time_lte: DateTime
  disbursement_time_gt: DateTime
  disbursement_time_gte: DateTime
  avg_month_rev: Float
  avg_month_rev_not: Float
  avg_month_rev_in: [Float!]
  avg_month_rev_not_in: [Float!]
  avg_month_rev_lt: Float
  avg_month_rev_lte: Float
  avg_month_rev_gt: Float
  avg_month_rev_gte: Float
  avg_month_exp: Float
  avg_month_exp_not: Float
  avg_month_exp_in: [Float!]
  avg_month_exp_not_in: [Float!]
  avg_month_exp_lt: Float
  avg_month_exp_lte: Float
  avg_month_exp_gt: Float
  avg_month_exp_gte: Float
  is_serving_loan: Boolean
  is_serving_loan_not: Boolean
  application: ApplicationWhereInput
  AND: [FinanceOptionWhereInput!]
  OR: [FinanceOptionWhereInput!]
  NOT: [FinanceOptionWhereInput!]
}

input FinanceOptionWhereUniqueInput {
  id: ID
}

type FundDetail {
  id: ID!
  fund_type: FundType!
  reason: String!
  payment_due_date: String
  disbursement_date: DateTime!
  amount: Float!
}

type FundDetailConnection {
  pageInfo: PageInfo!
  edges: [FundDetailEdge]!
  aggregate: AggregateFundDetail!
}

input FundDetailCreateInput {
  id: ID
  fund_type: FundType!
  reason: String!
  payment_due_date: String
  disbursement_date: DateTime!
  amount: Float!
}

input FundDetailCreateOneInput {
  create: FundDetailCreateInput
  connect: FundDetailWhereUniqueInput
}

type FundDetailEdge {
  node: FundDetail!
  cursor: String!
}

enum FundDetailOrderByInput {
  id_ASC
  id_DESC
  fund_type_ASC
  fund_type_DESC
  reason_ASC
  reason_DESC
  payment_due_date_ASC
  payment_due_date_DESC
  disbursement_date_ASC
  disbursement_date_DESC
  amount_ASC
  amount_DESC
}

type FundDetailPreviousValues {
  id: ID!
  fund_type: FundType!
  reason: String!
  payment_due_date: String
  disbursement_date: DateTime!
  amount: Float!
}

type FundDetailSubscriptionPayload {
  mutation: MutationType!
  node: FundDetail
  updatedFields: [String!]
  previousValues: FundDetailPreviousValues
}

input FundDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FundDetailWhereInput
  AND: [FundDetailSubscriptionWhereInput!]
  OR: [FundDetailSubscriptionWhereInput!]
  NOT: [FundDetailSubscriptionWhereInput!]
}

input FundDetailUpdateDataInput {
  fund_type: FundType
  reason: String
  payment_due_date: String
  disbursement_date: DateTime
  amount: Float
}

input FundDetailUpdateInput {
  fund_type: FundType
  reason: String
  payment_due_date: String
  disbursement_date: DateTime
  amount: Float
}

input FundDetailUpdateManyMutationInput {
  fund_type: FundType
  reason: String
  payment_due_date: String
  disbursement_date: DateTime
  amount: Float
}

input FundDetailUpdateOneInput {
  create: FundDetailCreateInput
  update: FundDetailUpdateDataInput
  upsert: FundDetailUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: FundDetailWhereUniqueInput
}

input FundDetailUpsertNestedInput {
  update: FundDetailUpdateDataInput!
  create: FundDetailCreateInput!
}

input FundDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fund_type: FundType
  fund_type_not: FundType
  fund_type_in: [FundType!]
  fund_type_not_in: [FundType!]
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  payment_due_date: String
  payment_due_date_not: String
  payment_due_date_in: [String!]
  payment_due_date_not_in: [String!]
  payment_due_date_lt: String
  payment_due_date_lte: String
  payment_due_date_gt: String
  payment_due_date_gte: String
  payment_due_date_contains: String
  payment_due_date_not_contains: String
  payment_due_date_starts_with: String
  payment_due_date_not_starts_with: String
  payment_due_date_ends_with: String
  payment_due_date_not_ends_with: String
  disbursement_date: DateTime
  disbursement_date_not: DateTime
  disbursement_date_in: [DateTime!]
  disbursement_date_not_in: [DateTime!]
  disbursement_date_lt: DateTime
  disbursement_date_lte: DateTime
  disbursement_date_gt: DateTime
  disbursement_date_gte: DateTime
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [FundDetailWhereInput!]
  OR: [FundDetailWhereInput!]
  NOT: [FundDetailWhereInput!]
}

input FundDetailWhereUniqueInput {
  id: ID
}

type FundRange {
  id: ID!
  min: Float!
  max: Float!
}

type FundRangeConnection {
  pageInfo: PageInfo!
  edges: [FundRangeEdge]!
  aggregate: AggregateFundRange!
}

input FundRangeCreateInput {
  id: ID
  min: Float!
  max: Float!
}

input FundRangeCreateOneInput {
  create: FundRangeCreateInput
  connect: FundRangeWhereUniqueInput
}

type FundRangeEdge {
  node: FundRange!
  cursor: String!
}

enum FundRangeOrderByInput {
  id_ASC
  id_DESC
  min_ASC
  min_DESC
  max_ASC
  max_DESC
}

type FundRangePreviousValues {
  id: ID!
  min: Float!
  max: Float!
}

type FundRangeSubscriptionPayload {
  mutation: MutationType!
  node: FundRange
  updatedFields: [String!]
  previousValues: FundRangePreviousValues
}

input FundRangeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FundRangeWhereInput
  AND: [FundRangeSubscriptionWhereInput!]
  OR: [FundRangeSubscriptionWhereInput!]
  NOT: [FundRangeSubscriptionWhereInput!]
}

input FundRangeUpdateDataInput {
  min: Float
  max: Float
}

input FundRangeUpdateInput {
  min: Float
  max: Float
}

input FundRangeUpdateManyMutationInput {
  min: Float
  max: Float
}

input FundRangeUpdateOneRequiredInput {
  create: FundRangeCreateInput
  update: FundRangeUpdateDataInput
  upsert: FundRangeUpsertNestedInput
  connect: FundRangeWhereUniqueInput
}

input FundRangeUpsertNestedInput {
  update: FundRangeUpdateDataInput!
  create: FundRangeCreateInput!
}

input FundRangeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  max: Float
  max_not: Float
  max_in: [Float!]
  max_not_in: [Float!]
  max_lt: Float
  max_lte: Float
  max_gt: Float
  max_gte: Float
  AND: [FundRangeWhereInput!]
  OR: [FundRangeWhereInput!]
  NOT: [FundRangeWhereInput!]
}

input FundRangeWhereUniqueInput {
  id: ID
}

enum FundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FundType {
  LOAN
  GRANT
}

enum Gender {
  MALE
  FEMALE
}

type Industry {
  id: ID!
  name: String!
}

type IndustryConnection {
  pageInfo: PageInfo!
  edges: [IndustryEdge]!
  aggregate: AggregateIndustry!
}

input IndustryCreateInput {
  id: ID
  name: String!
}

type IndustryEdge {
  node: Industry!
  cursor: String!
}

enum IndustryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type IndustryPreviousValues {
  id: ID!
  name: String!
}

type IndustrySubscriptionPayload {
  mutation: MutationType!
  node: Industry
  updatedFields: [String!]
  previousValues: IndustryPreviousValues
}

input IndustrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndustryWhereInput
  AND: [IndustrySubscriptionWhereInput!]
  OR: [IndustrySubscriptionWhereInput!]
  NOT: [IndustrySubscriptionWhereInput!]
}

input IndustryUpdateInput {
  name: String
}

input IndustryUpdateManyMutationInput {
  name: String
}

input IndustryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [IndustryWhereInput!]
  OR: [IndustryWhereInput!]
  NOT: [IndustryWhereInput!]
}

input IndustryWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createApplication(data: ApplicationCreateInput!): Application!
  updateApplication(data: ApplicationUpdateInput!, where: ApplicationWhereUniqueInput!): Application
  upsertApplication(where: ApplicationWhereUniqueInput!, create: ApplicationCreateInput!, update: ApplicationUpdateInput!): Application!
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
  createAuth(data: AuthCreateInput!): Auth!
  updateAuth(data: AuthUpdateInput!, where: AuthWhereUniqueInput!): Auth
  updateManyAuths(data: AuthUpdateManyMutationInput!, where: AuthWhereInput): BatchPayload!
  upsertAuth(where: AuthWhereUniqueInput!, create: AuthCreateInput!, update: AuthUpdateInput!): Auth!
  deleteAuth(where: AuthWhereUniqueInput!): Auth
  deleteManyAuths(where: AuthWhereInput): BatchPayload!
  createBusinessDetail(data: BusinessDetailCreateInput!): BusinessDetail!
  updateBusinessDetail(data: BusinessDetailUpdateInput!, where: BusinessDetailWhereUniqueInput!): BusinessDetail
  updateManyBusinessDetails(data: BusinessDetailUpdateManyMutationInput!, where: BusinessDetailWhereInput): BatchPayload!
  upsertBusinessDetail(where: BusinessDetailWhereUniqueInput!, create: BusinessDetailCreateInput!, update: BusinessDetailUpdateInput!): BusinessDetail!
  deleteBusinessDetail(where: BusinessDetailWhereUniqueInput!): BusinessDetail
  deleteManyBusinessDetails(where: BusinessDetailWhereInput): BatchPayload!
  createFinanceOption(data: FinanceOptionCreateInput!): FinanceOption!
  updateFinanceOption(data: FinanceOptionUpdateInput!, where: FinanceOptionWhereUniqueInput!): FinanceOption
  updateManyFinanceOptions(data: FinanceOptionUpdateManyMutationInput!, where: FinanceOptionWhereInput): BatchPayload!
  upsertFinanceOption(where: FinanceOptionWhereUniqueInput!, create: FinanceOptionCreateInput!, update: FinanceOptionUpdateInput!): FinanceOption!
  deleteFinanceOption(where: FinanceOptionWhereUniqueInput!): FinanceOption
  deleteManyFinanceOptions(where: FinanceOptionWhereInput): BatchPayload!
  createFundDetail(data: FundDetailCreateInput!): FundDetail!
  updateFundDetail(data: FundDetailUpdateInput!, where: FundDetailWhereUniqueInput!): FundDetail
  updateManyFundDetails(data: FundDetailUpdateManyMutationInput!, where: FundDetailWhereInput): BatchPayload!
  upsertFundDetail(where: FundDetailWhereUniqueInput!, create: FundDetailCreateInput!, update: FundDetailUpdateInput!): FundDetail!
  deleteFundDetail(where: FundDetailWhereUniqueInput!): FundDetail
  deleteManyFundDetails(where: FundDetailWhereInput): BatchPayload!
  createFundRange(data: FundRangeCreateInput!): FundRange!
  updateFundRange(data: FundRangeUpdateInput!, where: FundRangeWhereUniqueInput!): FundRange
  updateManyFundRanges(data: FundRangeUpdateManyMutationInput!, where: FundRangeWhereInput): BatchPayload!
  upsertFundRange(where: FundRangeWhereUniqueInput!, create: FundRangeCreateInput!, update: FundRangeUpdateInput!): FundRange!
  deleteFundRange(where: FundRangeWhereUniqueInput!): FundRange
  deleteManyFundRanges(where: FundRangeWhereInput): BatchPayload!
  createIndustry(data: IndustryCreateInput!): Industry!
  updateIndustry(data: IndustryUpdateInput!, where: IndustryWhereUniqueInput!): Industry
  updateManyIndustries(data: IndustryUpdateManyMutationInput!, where: IndustryWhereInput): BatchPayload!
  upsertIndustry(where: IndustryWhereUniqueInput!, create: IndustryCreateInput!, update: IndustryUpdateInput!): Industry!
  deleteIndustry(where: IndustryWhereUniqueInput!): Industry
  deleteManyIndustries(where: IndustryWhereInput): BatchPayload!
  createNextOfKinDetail(data: NextOfKinDetailCreateInput!): NextOfKinDetail!
  updateNextOfKinDetail(data: NextOfKinDetailUpdateInput!, where: NextOfKinDetailWhereUniqueInput!): NextOfKinDetail
  updateManyNextOfKinDetails(data: NextOfKinDetailUpdateManyMutationInput!, where: NextOfKinDetailWhereInput): BatchPayload!
  upsertNextOfKinDetail(where: NextOfKinDetailWhereUniqueInput!, create: NextOfKinDetailCreateInput!, update: NextOfKinDetailUpdateInput!): NextOfKinDetail!
  deleteNextOfKinDetail(where: NextOfKinDetailWhereUniqueInput!): NextOfKinDetail
  deleteManyNextOfKinDetails(where: NextOfKinDetailWhereInput): BatchPayload!
  createPersonalDetail(data: PersonalDetailCreateInput!): PersonalDetail!
  updatePersonalDetail(data: PersonalDetailUpdateInput!, where: PersonalDetailWhereUniqueInput!): PersonalDetail
  updateManyPersonalDetails(data: PersonalDetailUpdateManyMutationInput!, where: PersonalDetailWhereInput): BatchPayload!
  upsertPersonalDetail(where: PersonalDetailWhereUniqueInput!, create: PersonalDetailCreateInput!, update: PersonalDetailUpdateInput!): PersonalDetail!
  deletePersonalDetail(where: PersonalDetailWhereUniqueInput!): PersonalDetail
  deleteManyPersonalDetails(where: PersonalDetailWhereInput): BatchPayload!
  createSocialMedia(data: SocialMediaCreateInput!): SocialMedia!
  updateSocialMedia(data: SocialMediaUpdateInput!, where: SocialMediaWhereUniqueInput!): SocialMedia
  updateManySocialMedias(data: SocialMediaUpdateManyMutationInput!, where: SocialMediaWhereInput): BatchPayload!
  upsertSocialMedia(where: SocialMediaWhereUniqueInput!, create: SocialMediaCreateInput!, update: SocialMediaUpdateInput!): SocialMedia!
  deleteSocialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  deleteManySocialMedias(where: SocialMediaWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NextOfKinDetail {
  id: ID!
  first_name: String!
  last_name: String!
  phone_number: String!
  relationship: String!
}

type NextOfKinDetailConnection {
  pageInfo: PageInfo!
  edges: [NextOfKinDetailEdge]!
  aggregate: AggregateNextOfKinDetail!
}

input NextOfKinDetailCreateInput {
  id: ID
  first_name: String!
  last_name: String!
  phone_number: String!
  relationship: String!
}

input NextOfKinDetailCreateOneInput {
  create: NextOfKinDetailCreateInput
  connect: NextOfKinDetailWhereUniqueInput
}

type NextOfKinDetailEdge {
  node: NextOfKinDetail!
  cursor: String!
}

enum NextOfKinDetailOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  phone_number_ASC
  phone_number_DESC
  relationship_ASC
  relationship_DESC
}

type NextOfKinDetailPreviousValues {
  id: ID!
  first_name: String!
  last_name: String!
  phone_number: String!
  relationship: String!
}

type NextOfKinDetailSubscriptionPayload {
  mutation: MutationType!
  node: NextOfKinDetail
  updatedFields: [String!]
  previousValues: NextOfKinDetailPreviousValues
}

input NextOfKinDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NextOfKinDetailWhereInput
  AND: [NextOfKinDetailSubscriptionWhereInput!]
  OR: [NextOfKinDetailSubscriptionWhereInput!]
  NOT: [NextOfKinDetailSubscriptionWhereInput!]
}

input NextOfKinDetailUpdateDataInput {
  first_name: String
  last_name: String
  phone_number: String
  relationship: String
}

input NextOfKinDetailUpdateInput {
  first_name: String
  last_name: String
  phone_number: String
  relationship: String
}

input NextOfKinDetailUpdateManyMutationInput {
  first_name: String
  last_name: String
  phone_number: String
  relationship: String
}

input NextOfKinDetailUpdateOneRequiredInput {
  create: NextOfKinDetailCreateInput
  update: NextOfKinDetailUpdateDataInput
  upsert: NextOfKinDetailUpsertNestedInput
  connect: NextOfKinDetailWhereUniqueInput
}

input NextOfKinDetailUpsertNestedInput {
  update: NextOfKinDetailUpdateDataInput!
  create: NextOfKinDetailCreateInput!
}

input NextOfKinDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  phone_number: String
  phone_number_not: String
  phone_number_in: [String!]
  phone_number_not_in: [String!]
  phone_number_lt: String
  phone_number_lte: String
  phone_number_gt: String
  phone_number_gte: String
  phone_number_contains: String
  phone_number_not_contains: String
  phone_number_starts_with: String
  phone_number_not_starts_with: String
  phone_number_ends_with: String
  phone_number_not_ends_with: String
  relationship: String
  relationship_not: String
  relationship_in: [String!]
  relationship_not_in: [String!]
  relationship_lt: String
  relationship_lte: String
  relationship_gt: String
  relationship_gte: String
  relationship_contains: String
  relationship_not_contains: String
  relationship_starts_with: String
  relationship_not_starts_with: String
  relationship_ends_with: String
  relationship_not_ends_with: String
  AND: [NextOfKinDetailWhereInput!]
  OR: [NextOfKinDetailWhereInput!]
  NOT: [NextOfKinDetailWhereInput!]
}

input NextOfKinDetailWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PersonalDetail {
  id: ID!
  auth_id: Auth!
  first_name: String!
  last_name: String!
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

type PersonalDetailConnection {
  pageInfo: PageInfo!
  edges: [PersonalDetailEdge]!
  aggregate: AggregatePersonalDetail!
}

input PersonalDetailCreateInput {
  id: ID
  auth_id: AuthCreateOneWithoutDetailsInput!
  first_name: String!
  last_name: String!
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

input PersonalDetailCreateOneInput {
  create: PersonalDetailCreateInput
  connect: PersonalDetailWhereUniqueInput
}

input PersonalDetailCreateOneWithoutAuth_idInput {
  create: PersonalDetailCreateWithoutAuth_idInput
  connect: PersonalDetailWhereUniqueInput
}

input PersonalDetailCreateWithoutAuth_idInput {
  id: ID
  first_name: String!
  last_name: String!
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

type PersonalDetailEdge {
  node: PersonalDetail!
  cursor: String!
}

enum PersonalDetailOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  phone_number_ASC
  phone_number_DESC
  date_of_birth_ASC
  date_of_birth_DESC
  gender_ASC
  gender_DESC
  profile_pic_ASC
  profile_pic_DESC
  nationality_ASC
  nationality_DESC
  state_ASC
  state_DESC
  home_address_ASC
  home_address_DESC
}

type PersonalDetailPreviousValues {
  id: ID!
  first_name: String!
  last_name: String!
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

type PersonalDetailSubscriptionPayload {
  mutation: MutationType!
  node: PersonalDetail
  updatedFields: [String!]
  previousValues: PersonalDetailPreviousValues
}

input PersonalDetailSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PersonalDetailWhereInput
  AND: [PersonalDetailSubscriptionWhereInput!]
  OR: [PersonalDetailSubscriptionWhereInput!]
  NOT: [PersonalDetailSubscriptionWhereInput!]
}

input PersonalDetailUpdateDataInput {
  auth_id: AuthUpdateOneRequiredWithoutDetailsInput
  first_name: String
  last_name: String
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

input PersonalDetailUpdateInput {
  auth_id: AuthUpdateOneRequiredWithoutDetailsInput
  first_name: String
  last_name: String
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

input PersonalDetailUpdateManyMutationInput {
  first_name: String
  last_name: String
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

input PersonalDetailUpdateOneRequiredInput {
  create: PersonalDetailCreateInput
  update: PersonalDetailUpdateDataInput
  upsert: PersonalDetailUpsertNestedInput
  connect: PersonalDetailWhereUniqueInput
}

input PersonalDetailUpdateOneWithoutAuth_idInput {
  create: PersonalDetailCreateWithoutAuth_idInput
  update: PersonalDetailUpdateWithoutAuth_idDataInput
  upsert: PersonalDetailUpsertWithoutAuth_idInput
  delete: Boolean
  disconnect: Boolean
  connect: PersonalDetailWhereUniqueInput
}

input PersonalDetailUpdateWithoutAuth_idDataInput {
  first_name: String
  last_name: String
  phone_number: String
  date_of_birth: DateTime
  gender: Gender
  profile_pic: String
  nationality: String
  state: String
  home_address: String
}

input PersonalDetailUpsertNestedInput {
  update: PersonalDetailUpdateDataInput!
  create: PersonalDetailCreateInput!
}

input PersonalDetailUpsertWithoutAuth_idInput {
  update: PersonalDetailUpdateWithoutAuth_idDataInput!
  create: PersonalDetailCreateWithoutAuth_idInput!
}

input PersonalDetailWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  auth_id: AuthWhereInput
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  phone_number: String
  phone_number_not: String
  phone_number_in: [String!]
  phone_number_not_in: [String!]
  phone_number_lt: String
  phone_number_lte: String
  phone_number_gt: String
  phone_number_gte: String
  phone_number_contains: String
  phone_number_not_contains: String
  phone_number_starts_with: String
  phone_number_not_starts_with: String
  phone_number_ends_with: String
  phone_number_not_ends_with: String
  date_of_birth: DateTime
  date_of_birth_not: DateTime
  date_of_birth_in: [DateTime!]
  date_of_birth_not_in: [DateTime!]
  date_of_birth_lt: DateTime
  date_of_birth_lte: DateTime
  date_of_birth_gt: DateTime
  date_of_birth_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  profile_pic: String
  profile_pic_not: String
  profile_pic_in: [String!]
  profile_pic_not_in: [String!]
  profile_pic_lt: String
  profile_pic_lte: String
  profile_pic_gt: String
  profile_pic_gte: String
  profile_pic_contains: String
  profile_pic_not_contains: String
  profile_pic_starts_with: String
  profile_pic_not_starts_with: String
  profile_pic_ends_with: String
  profile_pic_not_ends_with: String
  nationality: String
  nationality_not: String
  nationality_in: [String!]
  nationality_not_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_gt: String
  nationality_gte: String
  nationality_contains: String
  nationality_not_contains: String
  nationality_starts_with: String
  nationality_not_starts_with: String
  nationality_ends_with: String
  nationality_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  home_address: String
  home_address_not: String
  home_address_in: [String!]
  home_address_not_in: [String!]
  home_address_lt: String
  home_address_lte: String
  home_address_gt: String
  home_address_gte: String
  home_address_contains: String
  home_address_not_contains: String
  home_address_starts_with: String
  home_address_not_starts_with: String
  home_address_ends_with: String
  home_address_not_ends_with: String
  AND: [PersonalDetailWhereInput!]
  OR: [PersonalDetailWhereInput!]
  NOT: [PersonalDetailWhereInput!]
}

input PersonalDetailWhereUniqueInput {
  id: ID
}

type Query {
  application(where: ApplicationWhereUniqueInput!): Application
  applications(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Application]!
  applicationsConnection(where: ApplicationWhereInput, orderBy: ApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApplicationConnection!
  auth(where: AuthWhereUniqueInput!): Auth
  auths(where: AuthWhereInput, orderBy: AuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Auth]!
  authsConnection(where: AuthWhereInput, orderBy: AuthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthConnection!
  businessDetail(where: BusinessDetailWhereUniqueInput!): BusinessDetail
  businessDetails(where: BusinessDetailWhereInput, orderBy: BusinessDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BusinessDetail]!
  businessDetailsConnection(where: BusinessDetailWhereInput, orderBy: BusinessDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BusinessDetailConnection!
  financeOption(where: FinanceOptionWhereUniqueInput!): FinanceOption
  financeOptions(where: FinanceOptionWhereInput, orderBy: FinanceOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinanceOption]!
  financeOptionsConnection(where: FinanceOptionWhereInput, orderBy: FinanceOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinanceOptionConnection!
  fundDetail(where: FundDetailWhereUniqueInput!): FundDetail
  fundDetails(where: FundDetailWhereInput, orderBy: FundDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FundDetail]!
  fundDetailsConnection(where: FundDetailWhereInput, orderBy: FundDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FundDetailConnection!
  fundRange(where: FundRangeWhereUniqueInput!): FundRange
  fundRanges(where: FundRangeWhereInput, orderBy: FundRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FundRange]!
  fundRangesConnection(where: FundRangeWhereInput, orderBy: FundRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FundRangeConnection!
  industry(where: IndustryWhereUniqueInput!): Industry
  industries(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Industry]!
  industriesConnection(where: IndustryWhereInput, orderBy: IndustryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndustryConnection!
  nextOfKinDetail(where: NextOfKinDetailWhereUniqueInput!): NextOfKinDetail
  nextOfKinDetails(where: NextOfKinDetailWhereInput, orderBy: NextOfKinDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NextOfKinDetail]!
  nextOfKinDetailsConnection(where: NextOfKinDetailWhereInput, orderBy: NextOfKinDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NextOfKinDetailConnection!
  personalDetail(where: PersonalDetailWhereUniqueInput!): PersonalDetail
  personalDetails(where: PersonalDetailWhereInput, orderBy: PersonalDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonalDetail]!
  personalDetailsConnection(where: PersonalDetailWhereInput, orderBy: PersonalDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonalDetailConnection!
  socialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  socialMedias(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialMedia]!
  socialMediasConnection(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialMediaConnection!
  node(id: ID!): Node
}

type SocialMedia {
  id: ID!
  media_type: String!
  link: String!
  auth: Auth!
}

type SocialMediaConnection {
  pageInfo: PageInfo!
  edges: [SocialMediaEdge]!
  aggregate: AggregateSocialMedia!
}

input SocialMediaCreateInput {
  id: ID
  media_type: String!
  link: String!
  auth: AuthCreateOneWithoutSocial_mediaInput!
}

input SocialMediaCreateManyWithoutAuthInput {
  create: [SocialMediaCreateWithoutAuthInput!]
  connect: [SocialMediaWhereUniqueInput!]
}

input SocialMediaCreateWithoutAuthInput {
  id: ID
  media_type: String!
  link: String!
}

type SocialMediaEdge {
  node: SocialMedia!
  cursor: String!
}

enum SocialMediaOrderByInput {
  id_ASC
  id_DESC
  media_type_ASC
  media_type_DESC
  link_ASC
  link_DESC
}

type SocialMediaPreviousValues {
  id: ID!
  media_type: String!
  link: String!
}

input SocialMediaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  media_type: String
  media_type_not: String
  media_type_in: [String!]
  media_type_not_in: [String!]
  media_type_lt: String
  media_type_lte: String
  media_type_gt: String
  media_type_gte: String
  media_type_contains: String
  media_type_not_contains: String
  media_type_starts_with: String
  media_type_not_starts_with: String
  media_type_ends_with: String
  media_type_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  AND: [SocialMediaScalarWhereInput!]
  OR: [SocialMediaScalarWhereInput!]
  NOT: [SocialMediaScalarWhereInput!]
}

type SocialMediaSubscriptionPayload {
  mutation: MutationType!
  node: SocialMedia
  updatedFields: [String!]
  previousValues: SocialMediaPreviousValues
}

input SocialMediaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialMediaWhereInput
  AND: [SocialMediaSubscriptionWhereInput!]
  OR: [SocialMediaSubscriptionWhereInput!]
  NOT: [SocialMediaSubscriptionWhereInput!]
}

input SocialMediaUpdateInput {
  media_type: String
  link: String
  auth: AuthUpdateOneRequiredWithoutSocial_mediaInput
}

input SocialMediaUpdateManyDataInput {
  media_type: String
  link: String
}

input SocialMediaUpdateManyMutationInput {
  media_type: String
  link: String
}

input SocialMediaUpdateManyWithoutAuthInput {
  create: [SocialMediaCreateWithoutAuthInput!]
  delete: [SocialMediaWhereUniqueInput!]
  connect: [SocialMediaWhereUniqueInput!]
  set: [SocialMediaWhereUniqueInput!]
  disconnect: [SocialMediaWhereUniqueInput!]
  update: [SocialMediaUpdateWithWhereUniqueWithoutAuthInput!]
  upsert: [SocialMediaUpsertWithWhereUniqueWithoutAuthInput!]
  deleteMany: [SocialMediaScalarWhereInput!]
  updateMany: [SocialMediaUpdateManyWithWhereNestedInput!]
}

input SocialMediaUpdateManyWithWhereNestedInput {
  where: SocialMediaScalarWhereInput!
  data: SocialMediaUpdateManyDataInput!
}

input SocialMediaUpdateWithoutAuthDataInput {
  media_type: String
  link: String
}

input SocialMediaUpdateWithWhereUniqueWithoutAuthInput {
  where: SocialMediaWhereUniqueInput!
  data: SocialMediaUpdateWithoutAuthDataInput!
}

input SocialMediaUpsertWithWhereUniqueWithoutAuthInput {
  where: SocialMediaWhereUniqueInput!
  update: SocialMediaUpdateWithoutAuthDataInput!
  create: SocialMediaCreateWithoutAuthInput!
}

input SocialMediaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  media_type: String
  media_type_not: String
  media_type_in: [String!]
  media_type_not_in: [String!]
  media_type_lt: String
  media_type_lte: String
  media_type_gt: String
  media_type_gte: String
  media_type_contains: String
  media_type_not_contains: String
  media_type_starts_with: String
  media_type_not_starts_with: String
  media_type_ends_with: String
  media_type_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  auth: AuthWhereInput
  AND: [SocialMediaWhereInput!]
  OR: [SocialMediaWhereInput!]
  NOT: [SocialMediaWhereInput!]
}

input SocialMediaWhereUniqueInput {
  id: ID
}

type Subscription {
  application(where: ApplicationSubscriptionWhereInput): ApplicationSubscriptionPayload
  auth(where: AuthSubscriptionWhereInput): AuthSubscriptionPayload
  businessDetail(where: BusinessDetailSubscriptionWhereInput): BusinessDetailSubscriptionPayload
  financeOption(where: FinanceOptionSubscriptionWhereInput): FinanceOptionSubscriptionPayload
  fundDetail(where: FundDetailSubscriptionWhereInput): FundDetailSubscriptionPayload
  fundRange(where: FundRangeSubscriptionWhereInput): FundRangeSubscriptionPayload
  industry(where: IndustrySubscriptionWhereInput): IndustrySubscriptionPayload
  nextOfKinDetail(where: NextOfKinDetailSubscriptionWhereInput): NextOfKinDetailSubscriptionPayload
  personalDetail(where: PersonalDetailSubscriptionWhereInput): PersonalDetailSubscriptionPayload
  socialMedia(where: SocialMediaSubscriptionWhereInput): SocialMediaSubscriptionPayload
}
`
      }
    