// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  application: (where?: ApplicationWhereInput) => Promise<boolean>;
  auth: (where?: AuthWhereInput) => Promise<boolean>;
  businessDetail: (where?: BusinessDetailWhereInput) => Promise<boolean>;
  financeOption: (where?: FinanceOptionWhereInput) => Promise<boolean>;
  fundDetail: (where?: FundDetailWhereInput) => Promise<boolean>;
  fundRange: (where?: FundRangeWhereInput) => Promise<boolean>;
  industry: (where?: IndustryWhereInput) => Promise<boolean>;
  nextOfKinDetail: (where?: NextOfKinDetailWhereInput) => Promise<boolean>;
  personalDetail: (where?: PersonalDetailWhereInput) => Promise<boolean>;
  socialMedia: (where?: SocialMediaWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  application: (
    where: ApplicationWhereUniqueInput
  ) => ApplicationNullablePromise;
  applications: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Application>;
  applicationsConnection: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicationConnectionPromise;
  auth: (where: AuthWhereUniqueInput) => AuthNullablePromise;
  auths: (args?: {
    where?: AuthWhereInput;
    orderBy?: AuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Auth>;
  authsConnection: (args?: {
    where?: AuthWhereInput;
    orderBy?: AuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuthConnectionPromise;
  businessDetail: (
    where: BusinessDetailWhereUniqueInput
  ) => BusinessDetailNullablePromise;
  businessDetails: (args?: {
    where?: BusinessDetailWhereInput;
    orderBy?: BusinessDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BusinessDetail>;
  businessDetailsConnection: (args?: {
    where?: BusinessDetailWhereInput;
    orderBy?: BusinessDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BusinessDetailConnectionPromise;
  financeOption: (
    where: FinanceOptionWhereUniqueInput
  ) => FinanceOptionNullablePromise;
  financeOptions: (args?: {
    where?: FinanceOptionWhereInput;
    orderBy?: FinanceOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FinanceOption>;
  financeOptionsConnection: (args?: {
    where?: FinanceOptionWhereInput;
    orderBy?: FinanceOptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FinanceOptionConnectionPromise;
  fundDetail: (where: FundDetailWhereUniqueInput) => FundDetailNullablePromise;
  fundDetails: (args?: {
    where?: FundDetailWhereInput;
    orderBy?: FundDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FundDetail>;
  fundDetailsConnection: (args?: {
    where?: FundDetailWhereInput;
    orderBy?: FundDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FundDetailConnectionPromise;
  fundRange: (where: FundRangeWhereUniqueInput) => FundRangeNullablePromise;
  fundRanges: (args?: {
    where?: FundRangeWhereInput;
    orderBy?: FundRangeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FundRange>;
  fundRangesConnection: (args?: {
    where?: FundRangeWhereInput;
    orderBy?: FundRangeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FundRangeConnectionPromise;
  industry: (where: IndustryWhereUniqueInput) => IndustryNullablePromise;
  industries: (args?: {
    where?: IndustryWhereInput;
    orderBy?: IndustryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Industry>;
  industriesConnection: (args?: {
    where?: IndustryWhereInput;
    orderBy?: IndustryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IndustryConnectionPromise;
  nextOfKinDetail: (
    where: NextOfKinDetailWhereUniqueInput
  ) => NextOfKinDetailNullablePromise;
  nextOfKinDetails: (args?: {
    where?: NextOfKinDetailWhereInput;
    orderBy?: NextOfKinDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NextOfKinDetail>;
  nextOfKinDetailsConnection: (args?: {
    where?: NextOfKinDetailWhereInput;
    orderBy?: NextOfKinDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NextOfKinDetailConnectionPromise;
  personalDetail: (
    where: PersonalDetailWhereUniqueInput
  ) => PersonalDetailNullablePromise;
  personalDetails: (args?: {
    where?: PersonalDetailWhereInput;
    orderBy?: PersonalDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PersonalDetail>;
  personalDetailsConnection: (args?: {
    where?: PersonalDetailWhereInput;
    orderBy?: PersonalDetailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonalDetailConnectionPromise;
  socialMedia: (
    where: SocialMediaWhereUniqueInput
  ) => SocialMediaNullablePromise;
  socialMedias: (args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialMedia>;
  socialMediasConnection: (args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialMediaConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApplication: (data: ApplicationCreateInput) => ApplicationPromise;
  updateApplication: (args: {
    data: ApplicationUpdateInput;
    where: ApplicationWhereUniqueInput;
  }) => ApplicationPromise;
  upsertApplication: (args: {
    where: ApplicationWhereUniqueInput;
    create: ApplicationCreateInput;
    update: ApplicationUpdateInput;
  }) => ApplicationPromise;
  deleteApplication: (where: ApplicationWhereUniqueInput) => ApplicationPromise;
  deleteManyApplications: (
    where?: ApplicationWhereInput
  ) => BatchPayloadPromise;
  createAuth: (data: AuthCreateInput) => AuthPromise;
  updateAuth: (args: {
    data: AuthUpdateInput;
    where: AuthWhereUniqueInput;
  }) => AuthPromise;
  updateManyAuths: (args: {
    data: AuthUpdateManyMutationInput;
    where?: AuthWhereInput;
  }) => BatchPayloadPromise;
  upsertAuth: (args: {
    where: AuthWhereUniqueInput;
    create: AuthCreateInput;
    update: AuthUpdateInput;
  }) => AuthPromise;
  deleteAuth: (where: AuthWhereUniqueInput) => AuthPromise;
  deleteManyAuths: (where?: AuthWhereInput) => BatchPayloadPromise;
  createBusinessDetail: (
    data: BusinessDetailCreateInput
  ) => BusinessDetailPromise;
  updateBusinessDetail: (args: {
    data: BusinessDetailUpdateInput;
    where: BusinessDetailWhereUniqueInput;
  }) => BusinessDetailPromise;
  updateManyBusinessDetails: (args: {
    data: BusinessDetailUpdateManyMutationInput;
    where?: BusinessDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertBusinessDetail: (args: {
    where: BusinessDetailWhereUniqueInput;
    create: BusinessDetailCreateInput;
    update: BusinessDetailUpdateInput;
  }) => BusinessDetailPromise;
  deleteBusinessDetail: (
    where: BusinessDetailWhereUniqueInput
  ) => BusinessDetailPromise;
  deleteManyBusinessDetails: (
    where?: BusinessDetailWhereInput
  ) => BatchPayloadPromise;
  createFinanceOption: (data: FinanceOptionCreateInput) => FinanceOptionPromise;
  updateFinanceOption: (args: {
    data: FinanceOptionUpdateInput;
    where: FinanceOptionWhereUniqueInput;
  }) => FinanceOptionPromise;
  updateManyFinanceOptions: (args: {
    data: FinanceOptionUpdateManyMutationInput;
    where?: FinanceOptionWhereInput;
  }) => BatchPayloadPromise;
  upsertFinanceOption: (args: {
    where: FinanceOptionWhereUniqueInput;
    create: FinanceOptionCreateInput;
    update: FinanceOptionUpdateInput;
  }) => FinanceOptionPromise;
  deleteFinanceOption: (
    where: FinanceOptionWhereUniqueInput
  ) => FinanceOptionPromise;
  deleteManyFinanceOptions: (
    where?: FinanceOptionWhereInput
  ) => BatchPayloadPromise;
  createFundDetail: (data: FundDetailCreateInput) => FundDetailPromise;
  updateFundDetail: (args: {
    data: FundDetailUpdateInput;
    where: FundDetailWhereUniqueInput;
  }) => FundDetailPromise;
  updateManyFundDetails: (args: {
    data: FundDetailUpdateManyMutationInput;
    where?: FundDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertFundDetail: (args: {
    where: FundDetailWhereUniqueInput;
    create: FundDetailCreateInput;
    update: FundDetailUpdateInput;
  }) => FundDetailPromise;
  deleteFundDetail: (where: FundDetailWhereUniqueInput) => FundDetailPromise;
  deleteManyFundDetails: (where?: FundDetailWhereInput) => BatchPayloadPromise;
  createFundRange: (data: FundRangeCreateInput) => FundRangePromise;
  updateFundRange: (args: {
    data: FundRangeUpdateInput;
    where: FundRangeWhereUniqueInput;
  }) => FundRangePromise;
  updateManyFundRanges: (args: {
    data: FundRangeUpdateManyMutationInput;
    where?: FundRangeWhereInput;
  }) => BatchPayloadPromise;
  upsertFundRange: (args: {
    where: FundRangeWhereUniqueInput;
    create: FundRangeCreateInput;
    update: FundRangeUpdateInput;
  }) => FundRangePromise;
  deleteFundRange: (where: FundRangeWhereUniqueInput) => FundRangePromise;
  deleteManyFundRanges: (where?: FundRangeWhereInput) => BatchPayloadPromise;
  createIndustry: (data: IndustryCreateInput) => IndustryPromise;
  updateIndustry: (args: {
    data: IndustryUpdateInput;
    where: IndustryWhereUniqueInput;
  }) => IndustryPromise;
  updateManyIndustries: (args: {
    data: IndustryUpdateManyMutationInput;
    where?: IndustryWhereInput;
  }) => BatchPayloadPromise;
  upsertIndustry: (args: {
    where: IndustryWhereUniqueInput;
    create: IndustryCreateInput;
    update: IndustryUpdateInput;
  }) => IndustryPromise;
  deleteIndustry: (where: IndustryWhereUniqueInput) => IndustryPromise;
  deleteManyIndustries: (where?: IndustryWhereInput) => BatchPayloadPromise;
  createNextOfKinDetail: (
    data: NextOfKinDetailCreateInput
  ) => NextOfKinDetailPromise;
  updateNextOfKinDetail: (args: {
    data: NextOfKinDetailUpdateInput;
    where: NextOfKinDetailWhereUniqueInput;
  }) => NextOfKinDetailPromise;
  updateManyNextOfKinDetails: (args: {
    data: NextOfKinDetailUpdateManyMutationInput;
    where?: NextOfKinDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertNextOfKinDetail: (args: {
    where: NextOfKinDetailWhereUniqueInput;
    create: NextOfKinDetailCreateInput;
    update: NextOfKinDetailUpdateInput;
  }) => NextOfKinDetailPromise;
  deleteNextOfKinDetail: (
    where: NextOfKinDetailWhereUniqueInput
  ) => NextOfKinDetailPromise;
  deleteManyNextOfKinDetails: (
    where?: NextOfKinDetailWhereInput
  ) => BatchPayloadPromise;
  createPersonalDetail: (
    data: PersonalDetailCreateInput
  ) => PersonalDetailPromise;
  updatePersonalDetail: (args: {
    data: PersonalDetailUpdateInput;
    where: PersonalDetailWhereUniqueInput;
  }) => PersonalDetailPromise;
  updateManyPersonalDetails: (args: {
    data: PersonalDetailUpdateManyMutationInput;
    where?: PersonalDetailWhereInput;
  }) => BatchPayloadPromise;
  upsertPersonalDetail: (args: {
    where: PersonalDetailWhereUniqueInput;
    create: PersonalDetailCreateInput;
    update: PersonalDetailUpdateInput;
  }) => PersonalDetailPromise;
  deletePersonalDetail: (
    where: PersonalDetailWhereUniqueInput
  ) => PersonalDetailPromise;
  deleteManyPersonalDetails: (
    where?: PersonalDetailWhereInput
  ) => BatchPayloadPromise;
  createSocialMedia: (data: SocialMediaCreateInput) => SocialMediaPromise;
  updateSocialMedia: (args: {
    data: SocialMediaUpdateInput;
    where: SocialMediaWhereUniqueInput;
  }) => SocialMediaPromise;
  updateManySocialMedias: (args: {
    data: SocialMediaUpdateManyMutationInput;
    where?: SocialMediaWhereInput;
  }) => BatchPayloadPromise;
  upsertSocialMedia: (args: {
    where: SocialMediaWhereUniqueInput;
    create: SocialMediaCreateInput;
    update: SocialMediaUpdateInput;
  }) => SocialMediaPromise;
  deleteSocialMedia: (where: SocialMediaWhereUniqueInput) => SocialMediaPromise;
  deleteManySocialMedias: (
    where?: SocialMediaWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  application: (
    where?: ApplicationSubscriptionWhereInput
  ) => ApplicationSubscriptionPayloadSubscription;
  auth: (
    where?: AuthSubscriptionWhereInput
  ) => AuthSubscriptionPayloadSubscription;
  businessDetail: (
    where?: BusinessDetailSubscriptionWhereInput
  ) => BusinessDetailSubscriptionPayloadSubscription;
  financeOption: (
    where?: FinanceOptionSubscriptionWhereInput
  ) => FinanceOptionSubscriptionPayloadSubscription;
  fundDetail: (
    where?: FundDetailSubscriptionWhereInput
  ) => FundDetailSubscriptionPayloadSubscription;
  fundRange: (
    where?: FundRangeSubscriptionWhereInput
  ) => FundRangeSubscriptionPayloadSubscription;
  industry: (
    where?: IndustrySubscriptionWhereInput
  ) => IndustrySubscriptionPayloadSubscription;
  nextOfKinDetail: (
    where?: NextOfKinDetailSubscriptionWhereInput
  ) => NextOfKinDetailSubscriptionPayloadSubscription;
  personalDetail: (
    where?: PersonalDetailSubscriptionWhereInput
  ) => PersonalDetailSubscriptionPayloadSubscription;
  socialMedia: (
    where?: SocialMediaSubscriptionWhereInput
  ) => SocialMediaSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Gender = "MALE" | "FEMALE";

export type FundType = "LOAN" | "GRANT";

export type FundStatus = "PENDING" | "APPROVED" | "REJECTED";

export type SocialMediaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "media_type_ASC"
  | "media_type_DESC"
  | "link_ASC"
  | "link_DESC";

export type ApplicationOrderByInput = "id_ASC" | "id_DESC";

export type AuthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firebase_id_ASC"
  | "firebase_id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "updated_at_ASC"
  | "updated_at_DESC";

export type BusinessDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "industry_type_ASC"
  | "industry_type_DESC"
  | "business_type_ASC"
  | "business_type_DESC"
  | "registration_type_ASC"
  | "registration_type_DESC"
  | "registation_id_ASC"
  | "registation_id_DESC"
  | "business_start_year_ASC"
  | "business_start_year_DESC"
  | "bank_verification_number_ASC"
  | "bank_verification_number_DESC"
  | "fund_status_ASC"
  | "fund_status_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "updated_at_ASC"
  | "updated_at_DESC";

export type FinanceOptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fund_type_ASC"
  | "fund_type_DESC"
  | "reason_for_fund_ASC"
  | "reason_for_fund_DESC"
  | "disbursement_time_ASC"
  | "disbursement_time_DESC"
  | "avg_month_rev_ASC"
  | "avg_month_rev_DESC"
  | "avg_month_exp_ASC"
  | "avg_month_exp_DESC"
  | "is_serving_loan_ASC"
  | "is_serving_loan_DESC";

export type FundDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fund_type_ASC"
  | "fund_type_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "payment_due_date_ASC"
  | "payment_due_date_DESC"
  | "disbursement_date_ASC"
  | "disbursement_date_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type FundRangeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "min_ASC"
  | "min_DESC"
  | "max_ASC"
  | "max_DESC";

export type IndustryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type NextOfKinDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "phone_number_ASC"
  | "phone_number_DESC"
  | "relationship_ASC"
  | "relationship_DESC";

export type PersonalDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "phone_number_ASC"
  | "phone_number_DESC"
  | "date_of_birth_ASC"
  | "date_of_birth_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "profile_pic_ASC"
  | "profile_pic_DESC"
  | "nationality_ASC"
  | "nationality_DESC"
  | "state_ASC"
  | "state_DESC"
  | "home_address_ASC"
  | "home_address_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SocialMediaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  media_type?: Maybe<String>;
  media_type_not?: Maybe<String>;
  media_type_in?: Maybe<String[] | String>;
  media_type_not_in?: Maybe<String[] | String>;
  media_type_lt?: Maybe<String>;
  media_type_lte?: Maybe<String>;
  media_type_gt?: Maybe<String>;
  media_type_gte?: Maybe<String>;
  media_type_contains?: Maybe<String>;
  media_type_not_contains?: Maybe<String>;
  media_type_starts_with?: Maybe<String>;
  media_type_not_starts_with?: Maybe<String>;
  media_type_ends_with?: Maybe<String>;
  media_type_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  auth?: Maybe<AuthWhereInput>;
  AND?: Maybe<SocialMediaWhereInput[] | SocialMediaWhereInput>;
  OR?: Maybe<SocialMediaWhereInput[] | SocialMediaWhereInput>;
  NOT?: Maybe<SocialMediaWhereInput[] | SocialMediaWhereInput>;
}

export interface AuthWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firebase_id?: Maybe<String>;
  firebase_id_not?: Maybe<String>;
  firebase_id_in?: Maybe<String[] | String>;
  firebase_id_not_in?: Maybe<String[] | String>;
  firebase_id_lt?: Maybe<String>;
  firebase_id_lte?: Maybe<String>;
  firebase_id_gt?: Maybe<String>;
  firebase_id_gte?: Maybe<String>;
  firebase_id_contains?: Maybe<String>;
  firebase_id_not_contains?: Maybe<String>;
  firebase_id_starts_with?: Maybe<String>;
  firebase_id_not_starts_with?: Maybe<String>;
  firebase_id_ends_with?: Maybe<String>;
  firebase_id_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  details?: Maybe<PersonalDetailWhereInput>;
  social_media_every?: Maybe<SocialMediaWhereInput>;
  social_media_some?: Maybe<SocialMediaWhereInput>;
  social_media_none?: Maybe<SocialMediaWhereInput>;
  applications_every?: Maybe<ApplicationWhereInput>;
  applications_some?: Maybe<ApplicationWhereInput>;
  applications_none?: Maybe<ApplicationWhereInput>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  updated_at?: Maybe<DateTimeInput>;
  updated_at_not?: Maybe<DateTimeInput>;
  updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_lt?: Maybe<DateTimeInput>;
  updated_at_lte?: Maybe<DateTimeInput>;
  updated_at_gt?: Maybe<DateTimeInput>;
  updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AuthWhereInput[] | AuthWhereInput>;
  OR?: Maybe<AuthWhereInput[] | AuthWhereInput>;
  NOT?: Maybe<AuthWhereInput[] | AuthWhereInput>;
}

export interface PersonalDetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  auth_id?: Maybe<AuthWhereInput>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  phone_number?: Maybe<String>;
  phone_number_not?: Maybe<String>;
  phone_number_in?: Maybe<String[] | String>;
  phone_number_not_in?: Maybe<String[] | String>;
  phone_number_lt?: Maybe<String>;
  phone_number_lte?: Maybe<String>;
  phone_number_gt?: Maybe<String>;
  phone_number_gte?: Maybe<String>;
  phone_number_contains?: Maybe<String>;
  phone_number_not_contains?: Maybe<String>;
  phone_number_starts_with?: Maybe<String>;
  phone_number_not_starts_with?: Maybe<String>;
  phone_number_ends_with?: Maybe<String>;
  phone_number_not_ends_with?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  date_of_birth_not?: Maybe<DateTimeInput>;
  date_of_birth_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_of_birth_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_of_birth_lt?: Maybe<DateTimeInput>;
  date_of_birth_lte?: Maybe<DateTimeInput>;
  date_of_birth_gt?: Maybe<DateTimeInput>;
  date_of_birth_gte?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  profile_pic?: Maybe<String>;
  profile_pic_not?: Maybe<String>;
  profile_pic_in?: Maybe<String[] | String>;
  profile_pic_not_in?: Maybe<String[] | String>;
  profile_pic_lt?: Maybe<String>;
  profile_pic_lte?: Maybe<String>;
  profile_pic_gt?: Maybe<String>;
  profile_pic_gte?: Maybe<String>;
  profile_pic_contains?: Maybe<String>;
  profile_pic_not_contains?: Maybe<String>;
  profile_pic_starts_with?: Maybe<String>;
  profile_pic_not_starts_with?: Maybe<String>;
  profile_pic_ends_with?: Maybe<String>;
  profile_pic_not_ends_with?: Maybe<String>;
  nationality?: Maybe<String>;
  nationality_not?: Maybe<String>;
  nationality_in?: Maybe<String[] | String>;
  nationality_not_in?: Maybe<String[] | String>;
  nationality_lt?: Maybe<String>;
  nationality_lte?: Maybe<String>;
  nationality_gt?: Maybe<String>;
  nationality_gte?: Maybe<String>;
  nationality_contains?: Maybe<String>;
  nationality_not_contains?: Maybe<String>;
  nationality_starts_with?: Maybe<String>;
  nationality_not_starts_with?: Maybe<String>;
  nationality_ends_with?: Maybe<String>;
  nationality_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  home_address?: Maybe<String>;
  home_address_not?: Maybe<String>;
  home_address_in?: Maybe<String[] | String>;
  home_address_not_in?: Maybe<String[] | String>;
  home_address_lt?: Maybe<String>;
  home_address_lte?: Maybe<String>;
  home_address_gt?: Maybe<String>;
  home_address_gte?: Maybe<String>;
  home_address_contains?: Maybe<String>;
  home_address_not_contains?: Maybe<String>;
  home_address_starts_with?: Maybe<String>;
  home_address_not_starts_with?: Maybe<String>;
  home_address_ends_with?: Maybe<String>;
  home_address_not_ends_with?: Maybe<String>;
  AND?: Maybe<PersonalDetailWhereInput[] | PersonalDetailWhereInput>;
  OR?: Maybe<PersonalDetailWhereInput[] | PersonalDetailWhereInput>;
  NOT?: Maybe<PersonalDetailWhereInput[] | PersonalDetailWhereInput>;
}

export interface ApplicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  auth?: Maybe<AuthWhereInput>;
  personal_details?: Maybe<PersonalDetailWhereInput>;
  next_of_kin?: Maybe<NextOfKinDetailWhereInput>;
  business_details?: Maybe<BusinessDetailWhereInput>;
  finance_options?: Maybe<FinanceOptionWhereInput>;
  AND?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  OR?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  NOT?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
}

export interface NextOfKinDetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  phone_number?: Maybe<String>;
  phone_number_not?: Maybe<String>;
  phone_number_in?: Maybe<String[] | String>;
  phone_number_not_in?: Maybe<String[] | String>;
  phone_number_lt?: Maybe<String>;
  phone_number_lte?: Maybe<String>;
  phone_number_gt?: Maybe<String>;
  phone_number_gte?: Maybe<String>;
  phone_number_contains?: Maybe<String>;
  phone_number_not_contains?: Maybe<String>;
  phone_number_starts_with?: Maybe<String>;
  phone_number_not_starts_with?: Maybe<String>;
  phone_number_ends_with?: Maybe<String>;
  phone_number_not_ends_with?: Maybe<String>;
  relationship?: Maybe<String>;
  relationship_not?: Maybe<String>;
  relationship_in?: Maybe<String[] | String>;
  relationship_not_in?: Maybe<String[] | String>;
  relationship_lt?: Maybe<String>;
  relationship_lte?: Maybe<String>;
  relationship_gt?: Maybe<String>;
  relationship_gte?: Maybe<String>;
  relationship_contains?: Maybe<String>;
  relationship_not_contains?: Maybe<String>;
  relationship_starts_with?: Maybe<String>;
  relationship_not_starts_with?: Maybe<String>;
  relationship_ends_with?: Maybe<String>;
  relationship_not_ends_with?: Maybe<String>;
  AND?: Maybe<NextOfKinDetailWhereInput[] | NextOfKinDetailWhereInput>;
  OR?: Maybe<NextOfKinDetailWhereInput[] | NextOfKinDetailWhereInput>;
  NOT?: Maybe<NextOfKinDetailWhereInput[] | NextOfKinDetailWhereInput>;
}

export interface BusinessDetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  industry_type?: Maybe<String>;
  industry_type_not?: Maybe<String>;
  industry_type_in?: Maybe<String[] | String>;
  industry_type_not_in?: Maybe<String[] | String>;
  industry_type_lt?: Maybe<String>;
  industry_type_lte?: Maybe<String>;
  industry_type_gt?: Maybe<String>;
  industry_type_gte?: Maybe<String>;
  industry_type_contains?: Maybe<String>;
  industry_type_not_contains?: Maybe<String>;
  industry_type_starts_with?: Maybe<String>;
  industry_type_not_starts_with?: Maybe<String>;
  industry_type_ends_with?: Maybe<String>;
  industry_type_not_ends_with?: Maybe<String>;
  business_type?: Maybe<String>;
  business_type_not?: Maybe<String>;
  business_type_in?: Maybe<String[] | String>;
  business_type_not_in?: Maybe<String[] | String>;
  business_type_lt?: Maybe<String>;
  business_type_lte?: Maybe<String>;
  business_type_gt?: Maybe<String>;
  business_type_gte?: Maybe<String>;
  business_type_contains?: Maybe<String>;
  business_type_not_contains?: Maybe<String>;
  business_type_starts_with?: Maybe<String>;
  business_type_not_starts_with?: Maybe<String>;
  business_type_ends_with?: Maybe<String>;
  business_type_not_ends_with?: Maybe<String>;
  registration_type?: Maybe<String>;
  registration_type_not?: Maybe<String>;
  registration_type_in?: Maybe<String[] | String>;
  registration_type_not_in?: Maybe<String[] | String>;
  registration_type_lt?: Maybe<String>;
  registration_type_lte?: Maybe<String>;
  registration_type_gt?: Maybe<String>;
  registration_type_gte?: Maybe<String>;
  registration_type_contains?: Maybe<String>;
  registration_type_not_contains?: Maybe<String>;
  registration_type_starts_with?: Maybe<String>;
  registration_type_not_starts_with?: Maybe<String>;
  registration_type_ends_with?: Maybe<String>;
  registration_type_not_ends_with?: Maybe<String>;
  registation_id?: Maybe<String>;
  registation_id_not?: Maybe<String>;
  registation_id_in?: Maybe<String[] | String>;
  registation_id_not_in?: Maybe<String[] | String>;
  registation_id_lt?: Maybe<String>;
  registation_id_lte?: Maybe<String>;
  registation_id_gt?: Maybe<String>;
  registation_id_gte?: Maybe<String>;
  registation_id_contains?: Maybe<String>;
  registation_id_not_contains?: Maybe<String>;
  registation_id_starts_with?: Maybe<String>;
  registation_id_not_starts_with?: Maybe<String>;
  registation_id_ends_with?: Maybe<String>;
  registation_id_not_ends_with?: Maybe<String>;
  business_start_year?: Maybe<DateTimeInput>;
  business_start_year_not?: Maybe<DateTimeInput>;
  business_start_year_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  business_start_year_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  business_start_year_lt?: Maybe<DateTimeInput>;
  business_start_year_lte?: Maybe<DateTimeInput>;
  business_start_year_gt?: Maybe<DateTimeInput>;
  business_start_year_gte?: Maybe<DateTimeInput>;
  bank_verification_number?: Maybe<String>;
  bank_verification_number_not?: Maybe<String>;
  bank_verification_number_in?: Maybe<String[] | String>;
  bank_verification_number_not_in?: Maybe<String[] | String>;
  bank_verification_number_lt?: Maybe<String>;
  bank_verification_number_lte?: Maybe<String>;
  bank_verification_number_gt?: Maybe<String>;
  bank_verification_number_gte?: Maybe<String>;
  bank_verification_number_contains?: Maybe<String>;
  bank_verification_number_not_contains?: Maybe<String>;
  bank_verification_number_starts_with?: Maybe<String>;
  bank_verification_number_not_starts_with?: Maybe<String>;
  bank_verification_number_ends_with?: Maybe<String>;
  bank_verification_number_not_ends_with?: Maybe<String>;
  fund_details?: Maybe<FundDetailWhereInput>;
  fund_status?: Maybe<FundStatus>;
  fund_status_not?: Maybe<FundStatus>;
  fund_status_in?: Maybe<FundStatus[] | FundStatus>;
  fund_status_not_in?: Maybe<FundStatus[] | FundStatus>;
  application?: Maybe<ApplicationWhereInput>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  updated_at?: Maybe<DateTimeInput>;
  updated_at_not?: Maybe<DateTimeInput>;
  updated_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_at_lt?: Maybe<DateTimeInput>;
  updated_at_lte?: Maybe<DateTimeInput>;
  updated_at_gt?: Maybe<DateTimeInput>;
  updated_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BusinessDetailWhereInput[] | BusinessDetailWhereInput>;
  OR?: Maybe<BusinessDetailWhereInput[] | BusinessDetailWhereInput>;
  NOT?: Maybe<BusinessDetailWhereInput[] | BusinessDetailWhereInput>;
}

export interface FundDetailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fund_type?: Maybe<FundType>;
  fund_type_not?: Maybe<FundType>;
  fund_type_in?: Maybe<FundType[] | FundType>;
  fund_type_not_in?: Maybe<FundType[] | FundType>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  payment_due_date?: Maybe<String>;
  payment_due_date_not?: Maybe<String>;
  payment_due_date_in?: Maybe<String[] | String>;
  payment_due_date_not_in?: Maybe<String[] | String>;
  payment_due_date_lt?: Maybe<String>;
  payment_due_date_lte?: Maybe<String>;
  payment_due_date_gt?: Maybe<String>;
  payment_due_date_gte?: Maybe<String>;
  payment_due_date_contains?: Maybe<String>;
  payment_due_date_not_contains?: Maybe<String>;
  payment_due_date_starts_with?: Maybe<String>;
  payment_due_date_not_starts_with?: Maybe<String>;
  payment_due_date_ends_with?: Maybe<String>;
  payment_due_date_not_ends_with?: Maybe<String>;
  disbursement_date?: Maybe<DateTimeInput>;
  disbursement_date_not?: Maybe<DateTimeInput>;
  disbursement_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  disbursement_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  disbursement_date_lt?: Maybe<DateTimeInput>;
  disbursement_date_lte?: Maybe<DateTimeInput>;
  disbursement_date_gt?: Maybe<DateTimeInput>;
  disbursement_date_gte?: Maybe<DateTimeInput>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<FundDetailWhereInput[] | FundDetailWhereInput>;
  OR?: Maybe<FundDetailWhereInput[] | FundDetailWhereInput>;
  NOT?: Maybe<FundDetailWhereInput[] | FundDetailWhereInput>;
}

export interface FinanceOptionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fund_type?: Maybe<FundType>;
  fund_type_not?: Maybe<FundType>;
  fund_type_in?: Maybe<FundType[] | FundType>;
  fund_type_not_in?: Maybe<FundType[] | FundType>;
  fund_range?: Maybe<FundRangeWhereInput>;
  reason_for_fund?: Maybe<String>;
  reason_for_fund_not?: Maybe<String>;
  reason_for_fund_in?: Maybe<String[] | String>;
  reason_for_fund_not_in?: Maybe<String[] | String>;
  reason_for_fund_lt?: Maybe<String>;
  reason_for_fund_lte?: Maybe<String>;
  reason_for_fund_gt?: Maybe<String>;
  reason_for_fund_gte?: Maybe<String>;
  reason_for_fund_contains?: Maybe<String>;
  reason_for_fund_not_contains?: Maybe<String>;
  reason_for_fund_starts_with?: Maybe<String>;
  reason_for_fund_not_starts_with?: Maybe<String>;
  reason_for_fund_ends_with?: Maybe<String>;
  reason_for_fund_not_ends_with?: Maybe<String>;
  disbursement_time?: Maybe<DateTimeInput>;
  disbursement_time_not?: Maybe<DateTimeInput>;
  disbursement_time_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  disbursement_time_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  disbursement_time_lt?: Maybe<DateTimeInput>;
  disbursement_time_lte?: Maybe<DateTimeInput>;
  disbursement_time_gt?: Maybe<DateTimeInput>;
  disbursement_time_gte?: Maybe<DateTimeInput>;
  avg_month_rev?: Maybe<Float>;
  avg_month_rev_not?: Maybe<Float>;
  avg_month_rev_in?: Maybe<Float[] | Float>;
  avg_month_rev_not_in?: Maybe<Float[] | Float>;
  avg_month_rev_lt?: Maybe<Float>;
  avg_month_rev_lte?: Maybe<Float>;
  avg_month_rev_gt?: Maybe<Float>;
  avg_month_rev_gte?: Maybe<Float>;
  avg_month_exp?: Maybe<Float>;
  avg_month_exp_not?: Maybe<Float>;
  avg_month_exp_in?: Maybe<Float[] | Float>;
  avg_month_exp_not_in?: Maybe<Float[] | Float>;
  avg_month_exp_lt?: Maybe<Float>;
  avg_month_exp_lte?: Maybe<Float>;
  avg_month_exp_gt?: Maybe<Float>;
  avg_month_exp_gte?: Maybe<Float>;
  is_serving_loan?: Maybe<Boolean>;
  is_serving_loan_not?: Maybe<Boolean>;
  application?: Maybe<ApplicationWhereInput>;
  AND?: Maybe<FinanceOptionWhereInput[] | FinanceOptionWhereInput>;
  OR?: Maybe<FinanceOptionWhereInput[] | FinanceOptionWhereInput>;
  NOT?: Maybe<FinanceOptionWhereInput[] | FinanceOptionWhereInput>;
}

export interface FundRangeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  min?: Maybe<Float>;
  min_not?: Maybe<Float>;
  min_in?: Maybe<Float[] | Float>;
  min_not_in?: Maybe<Float[] | Float>;
  min_lt?: Maybe<Float>;
  min_lte?: Maybe<Float>;
  min_gt?: Maybe<Float>;
  min_gte?: Maybe<Float>;
  max?: Maybe<Float>;
  max_not?: Maybe<Float>;
  max_in?: Maybe<Float[] | Float>;
  max_not_in?: Maybe<Float[] | Float>;
  max_lt?: Maybe<Float>;
  max_lte?: Maybe<Float>;
  max_gt?: Maybe<Float>;
  max_gte?: Maybe<Float>;
  AND?: Maybe<FundRangeWhereInput[] | FundRangeWhereInput>;
  OR?: Maybe<FundRangeWhereInput[] | FundRangeWhereInput>;
  NOT?: Maybe<FundRangeWhereInput[] | FundRangeWhereInput>;
}

export type AuthWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  firebase_id?: Maybe<String>;
  email?: Maybe<String>;
}>;

export type BusinessDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  registation_id?: Maybe<String>;
  bank_verification_number?: Maybe<String>;
}>;

export type FinanceOptionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FundDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FundRangeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type IndustryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface IndustryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<IndustryWhereInput[] | IndustryWhereInput>;
  OR?: Maybe<IndustryWhereInput[] | IndustryWhereInput>;
  NOT?: Maybe<IndustryWhereInput[] | IndustryWhereInput>;
}

export type NextOfKinDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PersonalDetailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SocialMediaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ApplicationCreateInput {
  id?: Maybe<ID_Input>;
  auth: AuthCreateOneWithoutApplicationsInput;
  personal_details: PersonalDetailCreateOneInput;
  next_of_kin: NextOfKinDetailCreateOneInput;
  business_details: BusinessDetailCreateOneWithoutApplicationInput;
  finance_options: FinanceOptionCreateOneWithoutApplicationInput;
}

export interface AuthCreateOneWithoutApplicationsInput {
  create?: Maybe<AuthCreateWithoutApplicationsInput>;
  connect?: Maybe<AuthWhereUniqueInput>;
}

export interface AuthCreateWithoutApplicationsInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  email: String;
  details?: Maybe<PersonalDetailCreateOneWithoutAuth_idInput>;
  social_media?: Maybe<SocialMediaCreateManyWithoutAuthInput>;
}

export interface PersonalDetailCreateOneWithoutAuth_idInput {
  create?: Maybe<PersonalDetailCreateWithoutAuth_idInput>;
  connect?: Maybe<PersonalDetailWhereUniqueInput>;
}

export interface PersonalDetailCreateWithoutAuth_idInput {
  id?: Maybe<ID_Input>;
  first_name: String;
  last_name: String;
  phone_number?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  profile_pic?: Maybe<String>;
  nationality?: Maybe<String>;
  state?: Maybe<String>;
  home_address?: Maybe<String>;
}

export interface SocialMediaCreateManyWithoutAuthInput {
  create?: Maybe<
    SocialMediaCreateWithoutAuthInput[] | SocialMediaCreateWithoutAuthInput
  >;
  connect?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
}

export interface SocialMediaCreateWithoutAuthInput {
  id?: Maybe<ID_Input>;
  media_type: String;
  link: String;
}

export interface PersonalDetailCreateOneInput {
  create?: Maybe<PersonalDetailCreateInput>;
  connect?: Maybe<PersonalDetailWhereUniqueInput>;
}

export interface PersonalDetailCreateInput {
  id?: Maybe<ID_Input>;
  auth_id: AuthCreateOneWithoutDetailsInput;
  first_name: String;
  last_name: String;
  phone_number?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  profile_pic?: Maybe<String>;
  nationality?: Maybe<String>;
  state?: Maybe<String>;
  home_address?: Maybe<String>;
}

export interface AuthCreateOneWithoutDetailsInput {
  create?: Maybe<AuthCreateWithoutDetailsInput>;
  connect?: Maybe<AuthWhereUniqueInput>;
}

export interface AuthCreateWithoutDetailsInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  email: String;
  social_media?: Maybe<SocialMediaCreateManyWithoutAuthInput>;
  applications?: Maybe<ApplicationCreateManyWithoutAuthInput>;
}

export interface ApplicationCreateManyWithoutAuthInput {
  create?: Maybe<
    ApplicationCreateWithoutAuthInput[] | ApplicationCreateWithoutAuthInput
  >;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutAuthInput {
  id?: Maybe<ID_Input>;
  personal_details: PersonalDetailCreateOneInput;
  next_of_kin: NextOfKinDetailCreateOneInput;
  business_details: BusinessDetailCreateOneWithoutApplicationInput;
  finance_options: FinanceOptionCreateOneWithoutApplicationInput;
}

export interface NextOfKinDetailCreateOneInput {
  create?: Maybe<NextOfKinDetailCreateInput>;
  connect?: Maybe<NextOfKinDetailWhereUniqueInput>;
}

export interface NextOfKinDetailCreateInput {
  id?: Maybe<ID_Input>;
  first_name: String;
  last_name: String;
  phone_number: String;
  relationship: String;
}

export interface BusinessDetailCreateOneWithoutApplicationInput {
  create?: Maybe<BusinessDetailCreateWithoutApplicationInput>;
  connect?: Maybe<BusinessDetailWhereUniqueInput>;
}

export interface BusinessDetailCreateWithoutApplicationInput {
  id?: Maybe<ID_Input>;
  name: String;
  industry_type: String;
  business_type: String;
  registration_type: String;
  registation_id: String;
  business_start_year: DateTimeInput;
  bank_verification_number: String;
  fund_details?: Maybe<FundDetailCreateOneInput>;
  fund_status?: Maybe<FundStatus>;
}

export interface FundDetailCreateOneInput {
  create?: Maybe<FundDetailCreateInput>;
  connect?: Maybe<FundDetailWhereUniqueInput>;
}

export interface FundDetailCreateInput {
  id?: Maybe<ID_Input>;
  fund_type: FundType;
  reason: String;
  payment_due_date?: Maybe<String>;
  disbursement_date: DateTimeInput;
  amount: Float;
}

export interface FinanceOptionCreateOneWithoutApplicationInput {
  create?: Maybe<FinanceOptionCreateWithoutApplicationInput>;
  connect?: Maybe<FinanceOptionWhereUniqueInput>;
}

export interface FinanceOptionCreateWithoutApplicationInput {
  id?: Maybe<ID_Input>;
  fund_type: FundType;
  fund_range: FundRangeCreateOneInput;
  reason_for_fund: String;
  disbursement_time: DateTimeInput;
  avg_month_rev: Float;
  avg_month_exp: Float;
  is_serving_loan: Boolean;
}

export interface FundRangeCreateOneInput {
  create?: Maybe<FundRangeCreateInput>;
  connect?: Maybe<FundRangeWhereUniqueInput>;
}

export interface FundRangeCreateInput {
  id?: Maybe<ID_Input>;
  min: Float;
  max: Float;
}

export interface ApplicationUpdateInput {
  auth?: Maybe<AuthUpdateOneRequiredWithoutApplicationsInput>;
  personal_details?: Maybe<PersonalDetailUpdateOneRequiredInput>;
  next_of_kin?: Maybe<NextOfKinDetailUpdateOneRequiredInput>;
  business_details?: Maybe<
    BusinessDetailUpdateOneRequiredWithoutApplicationInput
  >;
  finance_options?: Maybe<
    FinanceOptionUpdateOneRequiredWithoutApplicationInput
  >;
}

export interface AuthUpdateOneRequiredWithoutApplicationsInput {
  create?: Maybe<AuthCreateWithoutApplicationsInput>;
  update?: Maybe<AuthUpdateWithoutApplicationsDataInput>;
  upsert?: Maybe<AuthUpsertWithoutApplicationsInput>;
  connect?: Maybe<AuthWhereUniqueInput>;
}

export interface AuthUpdateWithoutApplicationsDataInput {
  firebase_id?: Maybe<String>;
  email?: Maybe<String>;
  details?: Maybe<PersonalDetailUpdateOneWithoutAuth_idInput>;
  social_media?: Maybe<SocialMediaUpdateManyWithoutAuthInput>;
}

export interface PersonalDetailUpdateOneWithoutAuth_idInput {
  create?: Maybe<PersonalDetailCreateWithoutAuth_idInput>;
  update?: Maybe<PersonalDetailUpdateWithoutAuth_idDataInput>;
  upsert?: Maybe<PersonalDetailUpsertWithoutAuth_idInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PersonalDetailWhereUniqueInput>;
}

export interface PersonalDetailUpdateWithoutAuth_idDataInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  profile_pic?: Maybe<String>;
  nationality?: Maybe<String>;
  state?: Maybe<String>;
  home_address?: Maybe<String>;
}

export interface PersonalDetailUpsertWithoutAuth_idInput {
  update: PersonalDetailUpdateWithoutAuth_idDataInput;
  create: PersonalDetailCreateWithoutAuth_idInput;
}

export interface SocialMediaUpdateManyWithoutAuthInput {
  create?: Maybe<
    SocialMediaCreateWithoutAuthInput[] | SocialMediaCreateWithoutAuthInput
  >;
  delete?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
  connect?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
  set?: Maybe<SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput>;
  disconnect?: Maybe<
    SocialMediaWhereUniqueInput[] | SocialMediaWhereUniqueInput
  >;
  update?: Maybe<
    | SocialMediaUpdateWithWhereUniqueWithoutAuthInput[]
    | SocialMediaUpdateWithWhereUniqueWithoutAuthInput
  >;
  upsert?: Maybe<
    | SocialMediaUpsertWithWhereUniqueWithoutAuthInput[]
    | SocialMediaUpsertWithWhereUniqueWithoutAuthInput
  >;
  deleteMany?: Maybe<
    SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput
  >;
  updateMany?: Maybe<
    | SocialMediaUpdateManyWithWhereNestedInput[]
    | SocialMediaUpdateManyWithWhereNestedInput
  >;
}

export interface SocialMediaUpdateWithWhereUniqueWithoutAuthInput {
  where: SocialMediaWhereUniqueInput;
  data: SocialMediaUpdateWithoutAuthDataInput;
}

export interface SocialMediaUpdateWithoutAuthDataInput {
  media_type?: Maybe<String>;
  link?: Maybe<String>;
}

export interface SocialMediaUpsertWithWhereUniqueWithoutAuthInput {
  where: SocialMediaWhereUniqueInput;
  update: SocialMediaUpdateWithoutAuthDataInput;
  create: SocialMediaCreateWithoutAuthInput;
}

export interface SocialMediaScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  media_type?: Maybe<String>;
  media_type_not?: Maybe<String>;
  media_type_in?: Maybe<String[] | String>;
  media_type_not_in?: Maybe<String[] | String>;
  media_type_lt?: Maybe<String>;
  media_type_lte?: Maybe<String>;
  media_type_gt?: Maybe<String>;
  media_type_gte?: Maybe<String>;
  media_type_contains?: Maybe<String>;
  media_type_not_contains?: Maybe<String>;
  media_type_starts_with?: Maybe<String>;
  media_type_not_starts_with?: Maybe<String>;
  media_type_ends_with?: Maybe<String>;
  media_type_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  AND?: Maybe<SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput>;
  OR?: Maybe<SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput>;
  NOT?: Maybe<SocialMediaScalarWhereInput[] | SocialMediaScalarWhereInput>;
}

export interface SocialMediaUpdateManyWithWhereNestedInput {
  where: SocialMediaScalarWhereInput;
  data: SocialMediaUpdateManyDataInput;
}

export interface SocialMediaUpdateManyDataInput {
  media_type?: Maybe<String>;
  link?: Maybe<String>;
}

export interface AuthUpsertWithoutApplicationsInput {
  update: AuthUpdateWithoutApplicationsDataInput;
  create: AuthCreateWithoutApplicationsInput;
}

export interface PersonalDetailUpdateOneRequiredInput {
  create?: Maybe<PersonalDetailCreateInput>;
  update?: Maybe<PersonalDetailUpdateDataInput>;
  upsert?: Maybe<PersonalDetailUpsertNestedInput>;
  connect?: Maybe<PersonalDetailWhereUniqueInput>;
}

export interface PersonalDetailUpdateDataInput {
  auth_id?: Maybe<AuthUpdateOneRequiredWithoutDetailsInput>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  profile_pic?: Maybe<String>;
  nationality?: Maybe<String>;
  state?: Maybe<String>;
  home_address?: Maybe<String>;
}

export interface AuthUpdateOneRequiredWithoutDetailsInput {
  create?: Maybe<AuthCreateWithoutDetailsInput>;
  update?: Maybe<AuthUpdateWithoutDetailsDataInput>;
  upsert?: Maybe<AuthUpsertWithoutDetailsInput>;
  connect?: Maybe<AuthWhereUniqueInput>;
}

export interface AuthUpdateWithoutDetailsDataInput {
  firebase_id?: Maybe<String>;
  email?: Maybe<String>;
  social_media?: Maybe<SocialMediaUpdateManyWithoutAuthInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutAuthInput>;
}

export interface ApplicationUpdateManyWithoutAuthInput {
  create?: Maybe<
    ApplicationCreateWithoutAuthInput[] | ApplicationCreateWithoutAuthInput
  >;
  delete?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  set?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  disconnect?: Maybe<
    ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput
  >;
  update?: Maybe<
    | ApplicationUpdateWithWhereUniqueWithoutAuthInput[]
    | ApplicationUpdateWithWhereUniqueWithoutAuthInput
  >;
  upsert?: Maybe<
    | ApplicationUpsertWithWhereUniqueWithoutAuthInput[]
    | ApplicationUpsertWithWhereUniqueWithoutAuthInput
  >;
  deleteMany?: Maybe<
    ApplicationScalarWhereInput[] | ApplicationScalarWhereInput
  >;
}

export interface ApplicationUpdateWithWhereUniqueWithoutAuthInput {
  where: ApplicationWhereUniqueInput;
  data: ApplicationUpdateWithoutAuthDataInput;
}

export interface ApplicationUpdateWithoutAuthDataInput {
  personal_details?: Maybe<PersonalDetailUpdateOneRequiredInput>;
  next_of_kin?: Maybe<NextOfKinDetailUpdateOneRequiredInput>;
  business_details?: Maybe<
    BusinessDetailUpdateOneRequiredWithoutApplicationInput
  >;
  finance_options?: Maybe<
    FinanceOptionUpdateOneRequiredWithoutApplicationInput
  >;
}

export interface NextOfKinDetailUpdateOneRequiredInput {
  create?: Maybe<NextOfKinDetailCreateInput>;
  update?: Maybe<NextOfKinDetailUpdateDataInput>;
  upsert?: Maybe<NextOfKinDetailUpsertNestedInput>;
  connect?: Maybe<NextOfKinDetailWhereUniqueInput>;
}

export interface NextOfKinDetailUpdateDataInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  relationship?: Maybe<String>;
}

export interface NextOfKinDetailUpsertNestedInput {
  update: NextOfKinDetailUpdateDataInput;
  create: NextOfKinDetailCreateInput;
}

export interface BusinessDetailUpdateOneRequiredWithoutApplicationInput {
  create?: Maybe<BusinessDetailCreateWithoutApplicationInput>;
  update?: Maybe<BusinessDetailUpdateWithoutApplicationDataInput>;
  upsert?: Maybe<BusinessDetailUpsertWithoutApplicationInput>;
  connect?: Maybe<BusinessDetailWhereUniqueInput>;
}

export interface BusinessDetailUpdateWithoutApplicationDataInput {
  name?: Maybe<String>;
  industry_type?: Maybe<String>;
  business_type?: Maybe<String>;
  registration_type?: Maybe<String>;
  registation_id?: Maybe<String>;
  business_start_year?: Maybe<DateTimeInput>;
  bank_verification_number?: Maybe<String>;
  fund_details?: Maybe<FundDetailUpdateOneInput>;
  fund_status?: Maybe<FundStatus>;
}

export interface FundDetailUpdateOneInput {
  create?: Maybe<FundDetailCreateInput>;
  update?: Maybe<FundDetailUpdateDataInput>;
  upsert?: Maybe<FundDetailUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FundDetailWhereUniqueInput>;
}

export interface FundDetailUpdateDataInput {
  fund_type?: Maybe<FundType>;
  reason?: Maybe<String>;
  payment_due_date?: Maybe<String>;
  disbursement_date?: Maybe<DateTimeInput>;
  amount?: Maybe<Float>;
}

export interface FundDetailUpsertNestedInput {
  update: FundDetailUpdateDataInput;
  create: FundDetailCreateInput;
}

export interface BusinessDetailUpsertWithoutApplicationInput {
  update: BusinessDetailUpdateWithoutApplicationDataInput;
  create: BusinessDetailCreateWithoutApplicationInput;
}

export interface FinanceOptionUpdateOneRequiredWithoutApplicationInput {
  create?: Maybe<FinanceOptionCreateWithoutApplicationInput>;
  update?: Maybe<FinanceOptionUpdateWithoutApplicationDataInput>;
  upsert?: Maybe<FinanceOptionUpsertWithoutApplicationInput>;
  connect?: Maybe<FinanceOptionWhereUniqueInput>;
}

export interface FinanceOptionUpdateWithoutApplicationDataInput {
  fund_type?: Maybe<FundType>;
  fund_range?: Maybe<FundRangeUpdateOneRequiredInput>;
  reason_for_fund?: Maybe<String>;
  disbursement_time?: Maybe<DateTimeInput>;
  avg_month_rev?: Maybe<Float>;
  avg_month_exp?: Maybe<Float>;
  is_serving_loan?: Maybe<Boolean>;
}

export interface FundRangeUpdateOneRequiredInput {
  create?: Maybe<FundRangeCreateInput>;
  update?: Maybe<FundRangeUpdateDataInput>;
  upsert?: Maybe<FundRangeUpsertNestedInput>;
  connect?: Maybe<FundRangeWhereUniqueInput>;
}

export interface FundRangeUpdateDataInput {
  min?: Maybe<Float>;
  max?: Maybe<Float>;
}

export interface FundRangeUpsertNestedInput {
  update: FundRangeUpdateDataInput;
  create: FundRangeCreateInput;
}

export interface FinanceOptionUpsertWithoutApplicationInput {
  update: FinanceOptionUpdateWithoutApplicationDataInput;
  create: FinanceOptionCreateWithoutApplicationInput;
}

export interface ApplicationUpsertWithWhereUniqueWithoutAuthInput {
  where: ApplicationWhereUniqueInput;
  update: ApplicationUpdateWithoutAuthDataInput;
  create: ApplicationCreateWithoutAuthInput;
}

export interface ApplicationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
  OR?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
  NOT?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
}

export interface AuthUpsertWithoutDetailsInput {
  update: AuthUpdateWithoutDetailsDataInput;
  create: AuthCreateWithoutDetailsInput;
}

export interface PersonalDetailUpsertNestedInput {
  update: PersonalDetailUpdateDataInput;
  create: PersonalDetailCreateInput;
}

export interface AuthCreateInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  email: String;
  details?: Maybe<PersonalDetailCreateOneWithoutAuth_idInput>;
  social_media?: Maybe<SocialMediaCreateManyWithoutAuthInput>;
  applications?: Maybe<ApplicationCreateManyWithoutAuthInput>;
}

export interface AuthUpdateInput {
  firebase_id?: Maybe<String>;
  email?: Maybe<String>;
  details?: Maybe<PersonalDetailUpdateOneWithoutAuth_idInput>;
  social_media?: Maybe<SocialMediaUpdateManyWithoutAuthInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutAuthInput>;
}

export interface AuthUpdateManyMutationInput {
  firebase_id?: Maybe<String>;
  email?: Maybe<String>;
}

export interface BusinessDetailCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  industry_type: String;
  business_type: String;
  registration_type: String;
  registation_id: String;
  business_start_year: DateTimeInput;
  bank_verification_number: String;
  fund_details?: Maybe<FundDetailCreateOneInput>;
  fund_status?: Maybe<FundStatus>;
  application: ApplicationCreateOneWithoutBusiness_detailsInput;
}

export interface ApplicationCreateOneWithoutBusiness_detailsInput {
  create?: Maybe<ApplicationCreateWithoutBusiness_detailsInput>;
  connect?: Maybe<ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutBusiness_detailsInput {
  id?: Maybe<ID_Input>;
  auth: AuthCreateOneWithoutApplicationsInput;
  personal_details: PersonalDetailCreateOneInput;
  next_of_kin: NextOfKinDetailCreateOneInput;
  finance_options: FinanceOptionCreateOneWithoutApplicationInput;
}

export interface BusinessDetailUpdateInput {
  name?: Maybe<String>;
  industry_type?: Maybe<String>;
  business_type?: Maybe<String>;
  registration_type?: Maybe<String>;
  registation_id?: Maybe<String>;
  business_start_year?: Maybe<DateTimeInput>;
  bank_verification_number?: Maybe<String>;
  fund_details?: Maybe<FundDetailUpdateOneInput>;
  fund_status?: Maybe<FundStatus>;
  application?: Maybe<ApplicationUpdateOneRequiredWithoutBusiness_detailsInput>;
}

export interface ApplicationUpdateOneRequiredWithoutBusiness_detailsInput {
  create?: Maybe<ApplicationCreateWithoutBusiness_detailsInput>;
  update?: Maybe<ApplicationUpdateWithoutBusiness_detailsDataInput>;
  upsert?: Maybe<ApplicationUpsertWithoutBusiness_detailsInput>;
  connect?: Maybe<ApplicationWhereUniqueInput>;
}

export interface ApplicationUpdateWithoutBusiness_detailsDataInput {
  auth?: Maybe<AuthUpdateOneRequiredWithoutApplicationsInput>;
  personal_details?: Maybe<PersonalDetailUpdateOneRequiredInput>;
  next_of_kin?: Maybe<NextOfKinDetailUpdateOneRequiredInput>;
  finance_options?: Maybe<
    FinanceOptionUpdateOneRequiredWithoutApplicationInput
  >;
}

export interface ApplicationUpsertWithoutBusiness_detailsInput {
  update: ApplicationUpdateWithoutBusiness_detailsDataInput;
  create: ApplicationCreateWithoutBusiness_detailsInput;
}

export interface BusinessDetailUpdateManyMutationInput {
  name?: Maybe<String>;
  industry_type?: Maybe<String>;
  business_type?: Maybe<String>;
  registration_type?: Maybe<String>;
  registation_id?: Maybe<String>;
  business_start_year?: Maybe<DateTimeInput>;
  bank_verification_number?: Maybe<String>;
  fund_status?: Maybe<FundStatus>;
}

export interface FinanceOptionCreateInput {
  id?: Maybe<ID_Input>;
  fund_type: FundType;
  fund_range: FundRangeCreateOneInput;
  reason_for_fund: String;
  disbursement_time: DateTimeInput;
  avg_month_rev: Float;
  avg_month_exp: Float;
  is_serving_loan: Boolean;
  application: ApplicationCreateOneWithoutFinance_optionsInput;
}

export interface ApplicationCreateOneWithoutFinance_optionsInput {
  create?: Maybe<ApplicationCreateWithoutFinance_optionsInput>;
  connect?: Maybe<ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutFinance_optionsInput {
  id?: Maybe<ID_Input>;
  auth: AuthCreateOneWithoutApplicationsInput;
  personal_details: PersonalDetailCreateOneInput;
  next_of_kin: NextOfKinDetailCreateOneInput;
  business_details: BusinessDetailCreateOneWithoutApplicationInput;
}

export interface FinanceOptionUpdateInput {
  fund_type?: Maybe<FundType>;
  fund_range?: Maybe<FundRangeUpdateOneRequiredInput>;
  reason_for_fund?: Maybe<String>;
  disbursement_time?: Maybe<DateTimeInput>;
  avg_month_rev?: Maybe<Float>;
  avg_month_exp?: Maybe<Float>;
  is_serving_loan?: Maybe<Boolean>;
  application?: Maybe<ApplicationUpdateOneRequiredWithoutFinance_optionsInput>;
}

export interface ApplicationUpdateOneRequiredWithoutFinance_optionsInput {
  create?: Maybe<ApplicationCreateWithoutFinance_optionsInput>;
  update?: Maybe<ApplicationUpdateWithoutFinance_optionsDataInput>;
  upsert?: Maybe<ApplicationUpsertWithoutFinance_optionsInput>;
  connect?: Maybe<ApplicationWhereUniqueInput>;
}

export interface ApplicationUpdateWithoutFinance_optionsDataInput {
  auth?: Maybe<AuthUpdateOneRequiredWithoutApplicationsInput>;
  personal_details?: Maybe<PersonalDetailUpdateOneRequiredInput>;
  next_of_kin?: Maybe<NextOfKinDetailUpdateOneRequiredInput>;
  business_details?: Maybe<
    BusinessDetailUpdateOneRequiredWithoutApplicationInput
  >;
}

export interface ApplicationUpsertWithoutFinance_optionsInput {
  update: ApplicationUpdateWithoutFinance_optionsDataInput;
  create: ApplicationCreateWithoutFinance_optionsInput;
}

export interface FinanceOptionUpdateManyMutationInput {
  fund_type?: Maybe<FundType>;
  reason_for_fund?: Maybe<String>;
  disbursement_time?: Maybe<DateTimeInput>;
  avg_month_rev?: Maybe<Float>;
  avg_month_exp?: Maybe<Float>;
  is_serving_loan?: Maybe<Boolean>;
}

export interface FundDetailUpdateInput {
  fund_type?: Maybe<FundType>;
  reason?: Maybe<String>;
  payment_due_date?: Maybe<String>;
  disbursement_date?: Maybe<DateTimeInput>;
  amount?: Maybe<Float>;
}

export interface FundDetailUpdateManyMutationInput {
  fund_type?: Maybe<FundType>;
  reason?: Maybe<String>;
  payment_due_date?: Maybe<String>;
  disbursement_date?: Maybe<DateTimeInput>;
  amount?: Maybe<Float>;
}

export interface FundRangeUpdateInput {
  min?: Maybe<Float>;
  max?: Maybe<Float>;
}

export interface FundRangeUpdateManyMutationInput {
  min?: Maybe<Float>;
  max?: Maybe<Float>;
}

export interface IndustryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface IndustryUpdateInput {
  name?: Maybe<String>;
}

export interface IndustryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface NextOfKinDetailUpdateInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  relationship?: Maybe<String>;
}

export interface NextOfKinDetailUpdateManyMutationInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  relationship?: Maybe<String>;
}

export interface PersonalDetailUpdateInput {
  auth_id?: Maybe<AuthUpdateOneRequiredWithoutDetailsInput>;
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  profile_pic?: Maybe<String>;
  nationality?: Maybe<String>;
  state?: Maybe<String>;
  home_address?: Maybe<String>;
}

export interface PersonalDetailUpdateManyMutationInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  phone_number?: Maybe<String>;
  date_of_birth?: Maybe<DateTimeInput>;
  gender?: Maybe<Gender>;
  profile_pic?: Maybe<String>;
  nationality?: Maybe<String>;
  state?: Maybe<String>;
  home_address?: Maybe<String>;
}

export interface SocialMediaCreateInput {
  id?: Maybe<ID_Input>;
  media_type: String;
  link: String;
  auth: AuthCreateOneWithoutSocial_mediaInput;
}

export interface AuthCreateOneWithoutSocial_mediaInput {
  create?: Maybe<AuthCreateWithoutSocial_mediaInput>;
  connect?: Maybe<AuthWhereUniqueInput>;
}

export interface AuthCreateWithoutSocial_mediaInput {
  id?: Maybe<ID_Input>;
  firebase_id: String;
  email: String;
  details?: Maybe<PersonalDetailCreateOneWithoutAuth_idInput>;
  applications?: Maybe<ApplicationCreateManyWithoutAuthInput>;
}

export interface SocialMediaUpdateInput {
  media_type?: Maybe<String>;
  link?: Maybe<String>;
  auth?: Maybe<AuthUpdateOneRequiredWithoutSocial_mediaInput>;
}

export interface AuthUpdateOneRequiredWithoutSocial_mediaInput {
  create?: Maybe<AuthCreateWithoutSocial_mediaInput>;
  update?: Maybe<AuthUpdateWithoutSocial_mediaDataInput>;
  upsert?: Maybe<AuthUpsertWithoutSocial_mediaInput>;
  connect?: Maybe<AuthWhereUniqueInput>;
}

export interface AuthUpdateWithoutSocial_mediaDataInput {
  firebase_id?: Maybe<String>;
  email?: Maybe<String>;
  details?: Maybe<PersonalDetailUpdateOneWithoutAuth_idInput>;
  applications?: Maybe<ApplicationUpdateManyWithoutAuthInput>;
}

export interface AuthUpsertWithoutSocial_mediaInput {
  update: AuthUpdateWithoutSocial_mediaDataInput;
  create: AuthCreateWithoutSocial_mediaInput;
}

export interface SocialMediaUpdateManyMutationInput {
  media_type?: Maybe<String>;
  link?: Maybe<String>;
}

export interface ApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ApplicationWhereInput>;
  AND?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
}

export interface AuthSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuthWhereInput>;
  AND?: Maybe<AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput>;
  OR?: Maybe<AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput>;
  NOT?: Maybe<AuthSubscriptionWhereInput[] | AuthSubscriptionWhereInput>;
}

export interface BusinessDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BusinessDetailWhereInput>;
  AND?: Maybe<
    | BusinessDetailSubscriptionWhereInput[]
    | BusinessDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | BusinessDetailSubscriptionWhereInput[]
    | BusinessDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | BusinessDetailSubscriptionWhereInput[]
    | BusinessDetailSubscriptionWhereInput
  >;
}

export interface FinanceOptionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FinanceOptionWhereInput>;
  AND?: Maybe<
    FinanceOptionSubscriptionWhereInput[] | FinanceOptionSubscriptionWhereInput
  >;
  OR?: Maybe<
    FinanceOptionSubscriptionWhereInput[] | FinanceOptionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FinanceOptionSubscriptionWhereInput[] | FinanceOptionSubscriptionWhereInput
  >;
}

export interface FundDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FundDetailWhereInput>;
  AND?: Maybe<
    FundDetailSubscriptionWhereInput[] | FundDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    FundDetailSubscriptionWhereInput[] | FundDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FundDetailSubscriptionWhereInput[] | FundDetailSubscriptionWhereInput
  >;
}

export interface FundRangeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FundRangeWhereInput>;
  AND?: Maybe<
    FundRangeSubscriptionWhereInput[] | FundRangeSubscriptionWhereInput
  >;
  OR?: Maybe<
    FundRangeSubscriptionWhereInput[] | FundRangeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    FundRangeSubscriptionWhereInput[] | FundRangeSubscriptionWhereInput
  >;
}

export interface IndustrySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IndustryWhereInput>;
  AND?: Maybe<
    IndustrySubscriptionWhereInput[] | IndustrySubscriptionWhereInput
  >;
  OR?: Maybe<IndustrySubscriptionWhereInput[] | IndustrySubscriptionWhereInput>;
  NOT?: Maybe<
    IndustrySubscriptionWhereInput[] | IndustrySubscriptionWhereInput
  >;
}

export interface NextOfKinDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NextOfKinDetailWhereInput>;
  AND?: Maybe<
    | NextOfKinDetailSubscriptionWhereInput[]
    | NextOfKinDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | NextOfKinDetailSubscriptionWhereInput[]
    | NextOfKinDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | NextOfKinDetailSubscriptionWhereInput[]
    | NextOfKinDetailSubscriptionWhereInput
  >;
}

export interface PersonalDetailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PersonalDetailWhereInput>;
  AND?: Maybe<
    | PersonalDetailSubscriptionWhereInput[]
    | PersonalDetailSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PersonalDetailSubscriptionWhereInput[]
    | PersonalDetailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PersonalDetailSubscriptionWhereInput[]
    | PersonalDetailSubscriptionWhereInput
  >;
}

export interface SocialMediaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialMediaWhereInput>;
  AND?: Maybe<
    SocialMediaSubscriptionWhereInput[] | SocialMediaSubscriptionWhereInput
  >;
  OR?: Maybe<
    SocialMediaSubscriptionWhereInput[] | SocialMediaSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SocialMediaSubscriptionWhereInput[] | SocialMediaSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Application {
  id: ID_Output;
}

export interface ApplicationPromise extends Promise<Application>, Fragmentable {
  id: () => Promise<ID_Output>;
  auth: <T = AuthPromise>() => T;
  personal_details: <T = PersonalDetailPromise>() => T;
  next_of_kin: <T = NextOfKinDetailPromise>() => T;
  business_details: <T = BusinessDetailPromise>() => T;
  finance_options: <T = FinanceOptionPromise>() => T;
}

export interface ApplicationSubscription
  extends Promise<AsyncIterator<Application>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auth: <T = AuthSubscription>() => T;
  personal_details: <T = PersonalDetailSubscription>() => T;
  next_of_kin: <T = NextOfKinDetailSubscription>() => T;
  business_details: <T = BusinessDetailSubscription>() => T;
  finance_options: <T = FinanceOptionSubscription>() => T;
}

export interface ApplicationNullablePromise
  extends Promise<Application | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auth: <T = AuthPromise>() => T;
  personal_details: <T = PersonalDetailPromise>() => T;
  next_of_kin: <T = NextOfKinDetailPromise>() => T;
  business_details: <T = BusinessDetailPromise>() => T;
  finance_options: <T = FinanceOptionPromise>() => T;
}

export interface Auth {
  id: ID_Output;
  firebase_id: String;
  email: String;
  created_at: DateTimeOutput;
  updated_at: DateTimeOutput;
}

export interface AuthPromise extends Promise<Auth>, Fragmentable {
  id: () => Promise<ID_Output>;
  firebase_id: () => Promise<String>;
  email: () => Promise<String>;
  details: <T = PersonalDetailPromise>() => T;
  social_media: <T = FragmentableArray<SocialMedia>>(args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
}

export interface AuthSubscription
  extends Promise<AsyncIterator<Auth>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firebase_id: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  details: <T = PersonalDetailSubscription>() => T;
  social_media: <T = Promise<AsyncIterator<SocialMediaSubscription>>>(args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = Promise<AsyncIterator<ApplicationSubscription>>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthNullablePromise
  extends Promise<Auth | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firebase_id: () => Promise<String>;
  email: () => Promise<String>;
  details: <T = PersonalDetailPromise>() => T;
  social_media: <T = FragmentableArray<SocialMedia>>(args?: {
    where?: SocialMediaWhereInput;
    orderBy?: SocialMediaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  applications: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  created_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
}

export interface PersonalDetail {
  id: ID_Output;
  first_name: String;
  last_name: String;
  phone_number?: String;
  date_of_birth?: DateTimeOutput;
  gender?: Gender;
  profile_pic?: String;
  nationality?: String;
  state?: String;
  home_address?: String;
}

export interface PersonalDetailPromise
  extends Promise<PersonalDetail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auth_id: <T = AuthPromise>() => T;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  phone_number: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  profile_pic: () => Promise<String>;
  nationality: () => Promise<String>;
  state: () => Promise<String>;
  home_address: () => Promise<String>;
}

export interface PersonalDetailSubscription
  extends Promise<AsyncIterator<PersonalDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auth_id: <T = AuthSubscription>() => T;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  phone_number: () => Promise<AsyncIterator<String>>;
  date_of_birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  profile_pic: () => Promise<AsyncIterator<String>>;
  nationality: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  home_address: () => Promise<AsyncIterator<String>>;
}

export interface PersonalDetailNullablePromise
  extends Promise<PersonalDetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auth_id: <T = AuthPromise>() => T;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  phone_number: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  profile_pic: () => Promise<String>;
  nationality: () => Promise<String>;
  state: () => Promise<String>;
  home_address: () => Promise<String>;
}

export interface SocialMedia {
  id: ID_Output;
  media_type: String;
  link: String;
}

export interface SocialMediaPromise extends Promise<SocialMedia>, Fragmentable {
  id: () => Promise<ID_Output>;
  media_type: () => Promise<String>;
  link: () => Promise<String>;
  auth: <T = AuthPromise>() => T;
}

export interface SocialMediaSubscription
  extends Promise<AsyncIterator<SocialMedia>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  media_type: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  auth: <T = AuthSubscription>() => T;
}

export interface SocialMediaNullablePromise
  extends Promise<SocialMedia | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  media_type: () => Promise<String>;
  link: () => Promise<String>;
  auth: <T = AuthPromise>() => T;
}

export interface NextOfKinDetail {
  id: ID_Output;
  first_name: String;
  last_name: String;
  phone_number: String;
  relationship: String;
}

export interface NextOfKinDetailPromise
  extends Promise<NextOfKinDetail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  phone_number: () => Promise<String>;
  relationship: () => Promise<String>;
}

export interface NextOfKinDetailSubscription
  extends Promise<AsyncIterator<NextOfKinDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  phone_number: () => Promise<AsyncIterator<String>>;
  relationship: () => Promise<AsyncIterator<String>>;
}

export interface NextOfKinDetailNullablePromise
  extends Promise<NextOfKinDetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  phone_number: () => Promise<String>;
  relationship: () => Promise<String>;
}

export interface BusinessDetail {
  id: ID_Output;
  name: String;
  industry_type: String;
  business_type: String;
  registration_type: String;
  registation_id: String;
  business_start_year: DateTimeOutput;
  bank_verification_number: String;
  fund_status: FundStatus;
  created_at: DateTimeOutput;
  updated_at: DateTimeOutput;
}

export interface BusinessDetailPromise
  extends Promise<BusinessDetail>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  industry_type: () => Promise<String>;
  business_type: () => Promise<String>;
  registration_type: () => Promise<String>;
  registation_id: () => Promise<String>;
  business_start_year: () => Promise<DateTimeOutput>;
  bank_verification_number: () => Promise<String>;
  fund_details: <T = FundDetailPromise>() => T;
  fund_status: () => Promise<FundStatus>;
  application: <T = ApplicationPromise>() => T;
  created_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
}

export interface BusinessDetailSubscription
  extends Promise<AsyncIterator<BusinessDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  industry_type: () => Promise<AsyncIterator<String>>;
  business_type: () => Promise<AsyncIterator<String>>;
  registration_type: () => Promise<AsyncIterator<String>>;
  registation_id: () => Promise<AsyncIterator<String>>;
  business_start_year: () => Promise<AsyncIterator<DateTimeOutput>>;
  bank_verification_number: () => Promise<AsyncIterator<String>>;
  fund_details: <T = FundDetailSubscription>() => T;
  fund_status: () => Promise<AsyncIterator<FundStatus>>;
  application: <T = ApplicationSubscription>() => T;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BusinessDetailNullablePromise
  extends Promise<BusinessDetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  industry_type: () => Promise<String>;
  business_type: () => Promise<String>;
  registration_type: () => Promise<String>;
  registation_id: () => Promise<String>;
  business_start_year: () => Promise<DateTimeOutput>;
  bank_verification_number: () => Promise<String>;
  fund_details: <T = FundDetailPromise>() => T;
  fund_status: () => Promise<FundStatus>;
  application: <T = ApplicationPromise>() => T;
  created_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
}

export interface FundDetail {
  id: ID_Output;
  fund_type: FundType;
  reason: String;
  payment_due_date?: String;
  disbursement_date: DateTimeOutput;
  amount: Float;
}

export interface FundDetailPromise extends Promise<FundDetail>, Fragmentable {
  id: () => Promise<ID_Output>;
  fund_type: () => Promise<FundType>;
  reason: () => Promise<String>;
  payment_due_date: () => Promise<String>;
  disbursement_date: () => Promise<DateTimeOutput>;
  amount: () => Promise<Float>;
}

export interface FundDetailSubscription
  extends Promise<AsyncIterator<FundDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fund_type: () => Promise<AsyncIterator<FundType>>;
  reason: () => Promise<AsyncIterator<String>>;
  payment_due_date: () => Promise<AsyncIterator<String>>;
  disbursement_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface FundDetailNullablePromise
  extends Promise<FundDetail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fund_type: () => Promise<FundType>;
  reason: () => Promise<String>;
  payment_due_date: () => Promise<String>;
  disbursement_date: () => Promise<DateTimeOutput>;
  amount: () => Promise<Float>;
}

export interface FinanceOption {
  id: ID_Output;
  fund_type: FundType;
  reason_for_fund: String;
  disbursement_time: DateTimeOutput;
  avg_month_rev: Float;
  avg_month_exp: Float;
  is_serving_loan: Boolean;
}

export interface FinanceOptionPromise
  extends Promise<FinanceOption>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fund_type: () => Promise<FundType>;
  fund_range: <T = FundRangePromise>() => T;
  reason_for_fund: () => Promise<String>;
  disbursement_time: () => Promise<DateTimeOutput>;
  avg_month_rev: () => Promise<Float>;
  avg_month_exp: () => Promise<Float>;
  is_serving_loan: () => Promise<Boolean>;
  application: <T = ApplicationPromise>() => T;
}

export interface FinanceOptionSubscription
  extends Promise<AsyncIterator<FinanceOption>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fund_type: () => Promise<AsyncIterator<FundType>>;
  fund_range: <T = FundRangeSubscription>() => T;
  reason_for_fund: () => Promise<AsyncIterator<String>>;
  disbursement_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  avg_month_rev: () => Promise<AsyncIterator<Float>>;
  avg_month_exp: () => Promise<AsyncIterator<Float>>;
  is_serving_loan: () => Promise<AsyncIterator<Boolean>>;
  application: <T = ApplicationSubscription>() => T;
}

export interface FinanceOptionNullablePromise
  extends Promise<FinanceOption | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fund_type: () => Promise<FundType>;
  fund_range: <T = FundRangePromise>() => T;
  reason_for_fund: () => Promise<String>;
  disbursement_time: () => Promise<DateTimeOutput>;
  avg_month_rev: () => Promise<Float>;
  avg_month_exp: () => Promise<Float>;
  is_serving_loan: () => Promise<Boolean>;
  application: <T = ApplicationPromise>() => T;
}

export interface FundRange {
  id: ID_Output;
  min: Float;
  max: Float;
}

export interface FundRangePromise extends Promise<FundRange>, Fragmentable {
  id: () => Promise<ID_Output>;
  min: () => Promise<Float>;
  max: () => Promise<Float>;
}

export interface FundRangeSubscription
  extends Promise<AsyncIterator<FundRange>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  min: () => Promise<AsyncIterator<Float>>;
  max: () => Promise<AsyncIterator<Float>>;
}

export interface FundRangeNullablePromise
  extends Promise<FundRange | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  min: () => Promise<Float>;
  max: () => Promise<Float>;
}

export interface ApplicationConnection {
  pageInfo: PageInfo;
  edges: ApplicationEdge[];
}

export interface ApplicationConnectionPromise
  extends Promise<ApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationEdge>>() => T;
  aggregate: <T = AggregateApplicationPromise>() => T;
}

export interface ApplicationConnectionSubscription
  extends Promise<AsyncIterator<ApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicationEdge {
  node: Application;
  cursor: String;
}

export interface ApplicationEdgePromise
  extends Promise<ApplicationEdge>,
    Fragmentable {
  node: <T = ApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationEdgeSubscription
  extends Promise<AsyncIterator<ApplicationEdge>>,
    Fragmentable {
  node: <T = ApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateApplication {
  count: Int;
}

export interface AggregateApplicationPromise
  extends Promise<AggregateApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationSubscription
  extends Promise<AsyncIterator<AggregateApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthConnection {
  pageInfo: PageInfo;
  edges: AuthEdge[];
}

export interface AuthConnectionPromise
  extends Promise<AuthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthEdge>>() => T;
  aggregate: <T = AggregateAuthPromise>() => T;
}

export interface AuthConnectionSubscription
  extends Promise<AsyncIterator<AuthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthSubscription>() => T;
}

export interface AuthEdge {
  node: Auth;
  cursor: String;
}

export interface AuthEdgePromise extends Promise<AuthEdge>, Fragmentable {
  node: <T = AuthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthEdgeSubscription
  extends Promise<AsyncIterator<AuthEdge>>,
    Fragmentable {
  node: <T = AuthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuth {
  count: Int;
}

export interface AggregateAuthPromise
  extends Promise<AggregateAuth>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthSubscription
  extends Promise<AsyncIterator<AggregateAuth>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BusinessDetailConnection {
  pageInfo: PageInfo;
  edges: BusinessDetailEdge[];
}

export interface BusinessDetailConnectionPromise
  extends Promise<BusinessDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BusinessDetailEdge>>() => T;
  aggregate: <T = AggregateBusinessDetailPromise>() => T;
}

export interface BusinessDetailConnectionSubscription
  extends Promise<AsyncIterator<BusinessDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BusinessDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBusinessDetailSubscription>() => T;
}

export interface BusinessDetailEdge {
  node: BusinessDetail;
  cursor: String;
}

export interface BusinessDetailEdgePromise
  extends Promise<BusinessDetailEdge>,
    Fragmentable {
  node: <T = BusinessDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BusinessDetailEdgeSubscription
  extends Promise<AsyncIterator<BusinessDetailEdge>>,
    Fragmentable {
  node: <T = BusinessDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBusinessDetail {
  count: Int;
}

export interface AggregateBusinessDetailPromise
  extends Promise<AggregateBusinessDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBusinessDetailSubscription
  extends Promise<AsyncIterator<AggregateBusinessDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FinanceOptionConnection {
  pageInfo: PageInfo;
  edges: FinanceOptionEdge[];
}

export interface FinanceOptionConnectionPromise
  extends Promise<FinanceOptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FinanceOptionEdge>>() => T;
  aggregate: <T = AggregateFinanceOptionPromise>() => T;
}

export interface FinanceOptionConnectionSubscription
  extends Promise<AsyncIterator<FinanceOptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FinanceOptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFinanceOptionSubscription>() => T;
}

export interface FinanceOptionEdge {
  node: FinanceOption;
  cursor: String;
}

export interface FinanceOptionEdgePromise
  extends Promise<FinanceOptionEdge>,
    Fragmentable {
  node: <T = FinanceOptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FinanceOptionEdgeSubscription
  extends Promise<AsyncIterator<FinanceOptionEdge>>,
    Fragmentable {
  node: <T = FinanceOptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFinanceOption {
  count: Int;
}

export interface AggregateFinanceOptionPromise
  extends Promise<AggregateFinanceOption>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFinanceOptionSubscription
  extends Promise<AsyncIterator<AggregateFinanceOption>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FundDetailConnection {
  pageInfo: PageInfo;
  edges: FundDetailEdge[];
}

export interface FundDetailConnectionPromise
  extends Promise<FundDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FundDetailEdge>>() => T;
  aggregate: <T = AggregateFundDetailPromise>() => T;
}

export interface FundDetailConnectionSubscription
  extends Promise<AsyncIterator<FundDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FundDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFundDetailSubscription>() => T;
}

export interface FundDetailEdge {
  node: FundDetail;
  cursor: String;
}

export interface FundDetailEdgePromise
  extends Promise<FundDetailEdge>,
    Fragmentable {
  node: <T = FundDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FundDetailEdgeSubscription
  extends Promise<AsyncIterator<FundDetailEdge>>,
    Fragmentable {
  node: <T = FundDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFundDetail {
  count: Int;
}

export interface AggregateFundDetailPromise
  extends Promise<AggregateFundDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFundDetailSubscription
  extends Promise<AsyncIterator<AggregateFundDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FundRangeConnection {
  pageInfo: PageInfo;
  edges: FundRangeEdge[];
}

export interface FundRangeConnectionPromise
  extends Promise<FundRangeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FundRangeEdge>>() => T;
  aggregate: <T = AggregateFundRangePromise>() => T;
}

export interface FundRangeConnectionSubscription
  extends Promise<AsyncIterator<FundRangeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FundRangeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFundRangeSubscription>() => T;
}

export interface FundRangeEdge {
  node: FundRange;
  cursor: String;
}

export interface FundRangeEdgePromise
  extends Promise<FundRangeEdge>,
    Fragmentable {
  node: <T = FundRangePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FundRangeEdgeSubscription
  extends Promise<AsyncIterator<FundRangeEdge>>,
    Fragmentable {
  node: <T = FundRangeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFundRange {
  count: Int;
}

export interface AggregateFundRangePromise
  extends Promise<AggregateFundRange>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFundRangeSubscription
  extends Promise<AsyncIterator<AggregateFundRange>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Industry {
  id: ID_Output;
  name: String;
}

export interface IndustryPromise extends Promise<Industry>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface IndustrySubscription
  extends Promise<AsyncIterator<Industry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface IndustryNullablePromise
  extends Promise<Industry | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface IndustryConnection {
  pageInfo: PageInfo;
  edges: IndustryEdge[];
}

export interface IndustryConnectionPromise
  extends Promise<IndustryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IndustryEdge>>() => T;
  aggregate: <T = AggregateIndustryPromise>() => T;
}

export interface IndustryConnectionSubscription
  extends Promise<AsyncIterator<IndustryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IndustryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIndustrySubscription>() => T;
}

export interface IndustryEdge {
  node: Industry;
  cursor: String;
}

export interface IndustryEdgePromise
  extends Promise<IndustryEdge>,
    Fragmentable {
  node: <T = IndustryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IndustryEdgeSubscription
  extends Promise<AsyncIterator<IndustryEdge>>,
    Fragmentable {
  node: <T = IndustrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIndustry {
  count: Int;
}

export interface AggregateIndustryPromise
  extends Promise<AggregateIndustry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIndustrySubscription
  extends Promise<AsyncIterator<AggregateIndustry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NextOfKinDetailConnection {
  pageInfo: PageInfo;
  edges: NextOfKinDetailEdge[];
}

export interface NextOfKinDetailConnectionPromise
  extends Promise<NextOfKinDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NextOfKinDetailEdge>>() => T;
  aggregate: <T = AggregateNextOfKinDetailPromise>() => T;
}

export interface NextOfKinDetailConnectionSubscription
  extends Promise<AsyncIterator<NextOfKinDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NextOfKinDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNextOfKinDetailSubscription>() => T;
}

export interface NextOfKinDetailEdge {
  node: NextOfKinDetail;
  cursor: String;
}

export interface NextOfKinDetailEdgePromise
  extends Promise<NextOfKinDetailEdge>,
    Fragmentable {
  node: <T = NextOfKinDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NextOfKinDetailEdgeSubscription
  extends Promise<AsyncIterator<NextOfKinDetailEdge>>,
    Fragmentable {
  node: <T = NextOfKinDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNextOfKinDetail {
  count: Int;
}

export interface AggregateNextOfKinDetailPromise
  extends Promise<AggregateNextOfKinDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNextOfKinDetailSubscription
  extends Promise<AsyncIterator<AggregateNextOfKinDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonalDetailConnection {
  pageInfo: PageInfo;
  edges: PersonalDetailEdge[];
}

export interface PersonalDetailConnectionPromise
  extends Promise<PersonalDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonalDetailEdge>>() => T;
  aggregate: <T = AggregatePersonalDetailPromise>() => T;
}

export interface PersonalDetailConnectionSubscription
  extends Promise<AsyncIterator<PersonalDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonalDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonalDetailSubscription>() => T;
}

export interface PersonalDetailEdge {
  node: PersonalDetail;
  cursor: String;
}

export interface PersonalDetailEdgePromise
  extends Promise<PersonalDetailEdge>,
    Fragmentable {
  node: <T = PersonalDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonalDetailEdgeSubscription
  extends Promise<AsyncIterator<PersonalDetailEdge>>,
    Fragmentable {
  node: <T = PersonalDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonalDetail {
  count: Int;
}

export interface AggregatePersonalDetailPromise
  extends Promise<AggregatePersonalDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonalDetailSubscription
  extends Promise<AsyncIterator<AggregatePersonalDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialMediaConnection {
  pageInfo: PageInfo;
  edges: SocialMediaEdge[];
}

export interface SocialMediaConnectionPromise
  extends Promise<SocialMediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialMediaEdge>>() => T;
  aggregate: <T = AggregateSocialMediaPromise>() => T;
}

export interface SocialMediaConnectionSubscription
  extends Promise<AsyncIterator<SocialMediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialMediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialMediaSubscription>() => T;
}

export interface SocialMediaEdge {
  node: SocialMedia;
  cursor: String;
}

export interface SocialMediaEdgePromise
  extends Promise<SocialMediaEdge>,
    Fragmentable {
  node: <T = SocialMediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialMediaEdgeSubscription
  extends Promise<AsyncIterator<SocialMediaEdge>>,
    Fragmentable {
  node: <T = SocialMediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocialMedia {
  count: Int;
}

export interface AggregateSocialMediaPromise
  extends Promise<AggregateSocialMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialMediaSubscription
  extends Promise<AsyncIterator<AggregateSocialMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ApplicationSubscriptionPayload {
  mutation: MutationType;
  node: Application;
  updatedFields: String[];
  previousValues: ApplicationPreviousValues;
}

export interface ApplicationSubscriptionPayloadPromise
  extends Promise<ApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationPreviousValuesPromise>() => T;
}

export interface ApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicationPreviousValuesSubscription>() => T;
}

export interface ApplicationPreviousValues {
  id: ID_Output;
}

export interface ApplicationPreviousValuesPromise
  extends Promise<ApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AuthSubscriptionPayload {
  mutation: MutationType;
  node: Auth;
  updatedFields: String[];
  previousValues: AuthPreviousValues;
}

export interface AuthSubscriptionPayloadPromise
  extends Promise<AuthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthPreviousValuesPromise>() => T;
}

export interface AuthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthPreviousValuesSubscription>() => T;
}

export interface AuthPreviousValues {
  id: ID_Output;
  firebase_id: String;
  email: String;
  created_at: DateTimeOutput;
  updated_at: DateTimeOutput;
}

export interface AuthPreviousValuesPromise
  extends Promise<AuthPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firebase_id: () => Promise<String>;
  email: () => Promise<String>;
  created_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
}

export interface AuthPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firebase_id: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BusinessDetailSubscriptionPayload {
  mutation: MutationType;
  node: BusinessDetail;
  updatedFields: String[];
  previousValues: BusinessDetailPreviousValues;
}

export interface BusinessDetailSubscriptionPayloadPromise
  extends Promise<BusinessDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BusinessDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BusinessDetailPreviousValuesPromise>() => T;
}

export interface BusinessDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BusinessDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BusinessDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BusinessDetailPreviousValuesSubscription>() => T;
}

export interface BusinessDetailPreviousValues {
  id: ID_Output;
  name: String;
  industry_type: String;
  business_type: String;
  registration_type: String;
  registation_id: String;
  business_start_year: DateTimeOutput;
  bank_verification_number: String;
  fund_status: FundStatus;
  created_at: DateTimeOutput;
  updated_at: DateTimeOutput;
}

export interface BusinessDetailPreviousValuesPromise
  extends Promise<BusinessDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  industry_type: () => Promise<String>;
  business_type: () => Promise<String>;
  registration_type: () => Promise<String>;
  registation_id: () => Promise<String>;
  business_start_year: () => Promise<DateTimeOutput>;
  bank_verification_number: () => Promise<String>;
  fund_status: () => Promise<FundStatus>;
  created_at: () => Promise<DateTimeOutput>;
  updated_at: () => Promise<DateTimeOutput>;
}

export interface BusinessDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<BusinessDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  industry_type: () => Promise<AsyncIterator<String>>;
  business_type: () => Promise<AsyncIterator<String>>;
  registration_type: () => Promise<AsyncIterator<String>>;
  registation_id: () => Promise<AsyncIterator<String>>;
  business_start_year: () => Promise<AsyncIterator<DateTimeOutput>>;
  bank_verification_number: () => Promise<AsyncIterator<String>>;
  fund_status: () => Promise<AsyncIterator<FundStatus>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FinanceOptionSubscriptionPayload {
  mutation: MutationType;
  node: FinanceOption;
  updatedFields: String[];
  previousValues: FinanceOptionPreviousValues;
}

export interface FinanceOptionSubscriptionPayloadPromise
  extends Promise<FinanceOptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FinanceOptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FinanceOptionPreviousValuesPromise>() => T;
}

export interface FinanceOptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FinanceOptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FinanceOptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FinanceOptionPreviousValuesSubscription>() => T;
}

export interface FinanceOptionPreviousValues {
  id: ID_Output;
  fund_type: FundType;
  reason_for_fund: String;
  disbursement_time: DateTimeOutput;
  avg_month_rev: Float;
  avg_month_exp: Float;
  is_serving_loan: Boolean;
}

export interface FinanceOptionPreviousValuesPromise
  extends Promise<FinanceOptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fund_type: () => Promise<FundType>;
  reason_for_fund: () => Promise<String>;
  disbursement_time: () => Promise<DateTimeOutput>;
  avg_month_rev: () => Promise<Float>;
  avg_month_exp: () => Promise<Float>;
  is_serving_loan: () => Promise<Boolean>;
}

export interface FinanceOptionPreviousValuesSubscription
  extends Promise<AsyncIterator<FinanceOptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fund_type: () => Promise<AsyncIterator<FundType>>;
  reason_for_fund: () => Promise<AsyncIterator<String>>;
  disbursement_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  avg_month_rev: () => Promise<AsyncIterator<Float>>;
  avg_month_exp: () => Promise<AsyncIterator<Float>>;
  is_serving_loan: () => Promise<AsyncIterator<Boolean>>;
}

export interface FundDetailSubscriptionPayload {
  mutation: MutationType;
  node: FundDetail;
  updatedFields: String[];
  previousValues: FundDetailPreviousValues;
}

export interface FundDetailSubscriptionPayloadPromise
  extends Promise<FundDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FundDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FundDetailPreviousValuesPromise>() => T;
}

export interface FundDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FundDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FundDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FundDetailPreviousValuesSubscription>() => T;
}

export interface FundDetailPreviousValues {
  id: ID_Output;
  fund_type: FundType;
  reason: String;
  payment_due_date?: String;
  disbursement_date: DateTimeOutput;
  amount: Float;
}

export interface FundDetailPreviousValuesPromise
  extends Promise<FundDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fund_type: () => Promise<FundType>;
  reason: () => Promise<String>;
  payment_due_date: () => Promise<String>;
  disbursement_date: () => Promise<DateTimeOutput>;
  amount: () => Promise<Float>;
}

export interface FundDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<FundDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fund_type: () => Promise<AsyncIterator<FundType>>;
  reason: () => Promise<AsyncIterator<String>>;
  payment_due_date: () => Promise<AsyncIterator<String>>;
  disbursement_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface FundRangeSubscriptionPayload {
  mutation: MutationType;
  node: FundRange;
  updatedFields: String[];
  previousValues: FundRangePreviousValues;
}

export interface FundRangeSubscriptionPayloadPromise
  extends Promise<FundRangeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FundRangePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FundRangePreviousValuesPromise>() => T;
}

export interface FundRangeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FundRangeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FundRangeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FundRangePreviousValuesSubscription>() => T;
}

export interface FundRangePreviousValues {
  id: ID_Output;
  min: Float;
  max: Float;
}

export interface FundRangePreviousValuesPromise
  extends Promise<FundRangePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  min: () => Promise<Float>;
  max: () => Promise<Float>;
}

export interface FundRangePreviousValuesSubscription
  extends Promise<AsyncIterator<FundRangePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  min: () => Promise<AsyncIterator<Float>>;
  max: () => Promise<AsyncIterator<Float>>;
}

export interface IndustrySubscriptionPayload {
  mutation: MutationType;
  node: Industry;
  updatedFields: String[];
  previousValues: IndustryPreviousValues;
}

export interface IndustrySubscriptionPayloadPromise
  extends Promise<IndustrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IndustryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IndustryPreviousValuesPromise>() => T;
}

export interface IndustrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IndustrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IndustrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IndustryPreviousValuesSubscription>() => T;
}

export interface IndustryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface IndustryPreviousValuesPromise
  extends Promise<IndustryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface IndustryPreviousValuesSubscription
  extends Promise<AsyncIterator<IndustryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NextOfKinDetailSubscriptionPayload {
  mutation: MutationType;
  node: NextOfKinDetail;
  updatedFields: String[];
  previousValues: NextOfKinDetailPreviousValues;
}

export interface NextOfKinDetailSubscriptionPayloadPromise
  extends Promise<NextOfKinDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NextOfKinDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NextOfKinDetailPreviousValuesPromise>() => T;
}

export interface NextOfKinDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NextOfKinDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NextOfKinDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NextOfKinDetailPreviousValuesSubscription>() => T;
}

export interface NextOfKinDetailPreviousValues {
  id: ID_Output;
  first_name: String;
  last_name: String;
  phone_number: String;
  relationship: String;
}

export interface NextOfKinDetailPreviousValuesPromise
  extends Promise<NextOfKinDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  phone_number: () => Promise<String>;
  relationship: () => Promise<String>;
}

export interface NextOfKinDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<NextOfKinDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  phone_number: () => Promise<AsyncIterator<String>>;
  relationship: () => Promise<AsyncIterator<String>>;
}

export interface PersonalDetailSubscriptionPayload {
  mutation: MutationType;
  node: PersonalDetail;
  updatedFields: String[];
  previousValues: PersonalDetailPreviousValues;
}

export interface PersonalDetailSubscriptionPayloadPromise
  extends Promise<PersonalDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonalDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonalDetailPreviousValuesPromise>() => T;
}

export interface PersonalDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonalDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonalDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonalDetailPreviousValuesSubscription>() => T;
}

export interface PersonalDetailPreviousValues {
  id: ID_Output;
  first_name: String;
  last_name: String;
  phone_number?: String;
  date_of_birth?: DateTimeOutput;
  gender?: Gender;
  profile_pic?: String;
  nationality?: String;
  state?: String;
  home_address?: String;
}

export interface PersonalDetailPreviousValuesPromise
  extends Promise<PersonalDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  phone_number: () => Promise<String>;
  date_of_birth: () => Promise<DateTimeOutput>;
  gender: () => Promise<Gender>;
  profile_pic: () => Promise<String>;
  nationality: () => Promise<String>;
  state: () => Promise<String>;
  home_address: () => Promise<String>;
}

export interface PersonalDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonalDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  phone_number: () => Promise<AsyncIterator<String>>;
  date_of_birth: () => Promise<AsyncIterator<DateTimeOutput>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  profile_pic: () => Promise<AsyncIterator<String>>;
  nationality: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  home_address: () => Promise<AsyncIterator<String>>;
}

export interface SocialMediaSubscriptionPayload {
  mutation: MutationType;
  node: SocialMedia;
  updatedFields: String[];
  previousValues: SocialMediaPreviousValues;
}

export interface SocialMediaSubscriptionPayloadPromise
  extends Promise<SocialMediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialMediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialMediaPreviousValuesPromise>() => T;
}

export interface SocialMediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialMediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialMediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialMediaPreviousValuesSubscription>() => T;
}

export interface SocialMediaPreviousValues {
  id: ID_Output;
  media_type: String;
  link: String;
}

export interface SocialMediaPreviousValuesPromise
  extends Promise<SocialMediaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  media_type: () => Promise<String>;
  link: () => Promise<String>;
}

export interface SocialMediaPreviousValuesSubscription
  extends Promise<AsyncIterator<SocialMediaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  media_type: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "FundType",
    embedded: false
  },
  {
    name: "FundStatus",
    embedded: false
  },
  {
    name: "Auth",
    embedded: false
  },
  {
    name: "SocialMedia",
    embedded: false
  },
  {
    name: "PersonalDetail",
    embedded: false
  },
  {
    name: "Application",
    embedded: false
  },
  {
    name: "FinanceOption",
    embedded: false
  },
  {
    name: "FundRange",
    embedded: false
  },
  {
    name: "NextOfKinDetail",
    embedded: false
  },
  {
    name: "BusinessDetail",
    embedded: false
  },
  {
    name: "FundDetail",
    embedded: false
  },
  {
    name: "Industry",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
